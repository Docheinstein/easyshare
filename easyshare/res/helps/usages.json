{
    "help": "Usage:\n<I4>\n<A> # alignment\n<b>help</b> [<u>COMMAND</u>]</a></i4>\n\n<I4>\n<A> # alignment\nShow the help of COMMAND if specified, or show the list of commands if no COMMAND is given.\n\nAvailable commands are:\n    :\n    ::\n    c\n    cd\n    close\n    connect\n    cp\n    disconnect\n    exec\n    exit\n    g\n    get\n    h\n    help\n    i\n    info\n    l\n    list\n    ls\n    mkdir\n    mv\n    o\n    open\n    p\n    ping\n    put\n    pwd\n    q\n    quit\n    rcd\n    rcp\n    rexec\n    rl\n    rls\n    rm\n    rmkdir\n    rmv\n    rpwd\n    rrm\n    rtree\n    s\n    scan\n    t\n    trace\n    tree\n    v\n    verbose</a></i4>\n\nOptions:\n",
    "h": "Usage:\n<I4>\n<A> # alignment\n<b>help</b> [<u>COMMAND</u>]</a></i4>\n\n<I4>\n<A> # alignment\nShow the help of COMMAND if specified, or show the list of commands if no COMMAND is given.\n\nAvailable commands are:\n    :\n    ::\n    c\n    cd\n    close\n    connect\n    cp\n    disconnect\n    exec\n    exit\n    g\n    get\n    h\n    help\n    i\n    info\n    l\n    list\n    ls\n    mkdir\n    mv\n    o\n    open\n    p\n    ping\n    put\n    pwd\n    q\n    quit\n    rcd\n    rcp\n    rexec\n    rl\n    rls\n    rm\n    rmkdir\n    rmv\n    rpwd\n    rrm\n    rtree\n    s\n    scan\n    t\n    trace\n    tree\n    v\n    verbose</a></i4>\n\nOptions:\n",
    "exit": "Usage:\n<I4>\n<A> # alignment\n<b>exit</b>\n<b>quit</b>\n<b>q</b></a></i4>\n\n<I4>\n<A> # alignment\nExit from the interactive shell.\n\nOpen connections are automatically closed.</a></i4>\n\nOptions:\n",
    "quit": "Usage:\n<I4>\n<A> # alignment\n<b>exit</b>\n<b>quit</b>\n<b>q</b></a></i4>\n\n<I4>\n<A> # alignment\nExit from the interactive shell.\n\nOpen connections are automatically closed.</a></i4>\n\nOptions:\n",
    "q": "Usage:\n<I4>\n<A> # alignment\n<b>exit</b>\n<b>quit</b>\n<b>q</b></a></i4>\n\n<I4>\n<A> # alignment\nExit from the interactive shell.\n\nOpen connections are automatically closed.</a></i4>\n\nOptions:\n",
    "trace": "Usage:\n<I4>\n<A> # alignment\n<b>trace</b> [<u>0</u> | <u>1</u>]\n<b>t</b>     [<u>0</u> | <u>1</u>]</a></i4>\n\n<I4>\n<A> # alignment\nShow (1) or hide (0) the packets sent and received to and from the server for any operation.\n\nIf no argument is given, toggle the packet tracing mode.</a></i4>\n\nOptions:\n",
    "t": "Usage:\n<I4>\n<A> # alignment\n<b>trace</b> [<u>0</u> | <u>1</u>]\n<b>t</b>     [<u>0</u> | <u>1</u>]</a></i4>\n\n<I4>\n<A> # alignment\nShow (1) or hide (0) the packets sent and received to and from the server for any operation.\n\nIf no argument is given, toggle the packet tracing mode.</a></i4>\n\nOptions:\n",
    "verbose": "Usage:\n<I4>\n<A> # alignment\n<b>verbose</b> [<u>LEVEL</u>]\n<b>v</b>       [<u>LEVEL</u>]</a></i4>\n\n<I4>\n<A> # alignment\nChange the verbosity level to <u>LEVEL</u> (default is <u>0</u>, which is disabled).\n\nThe messages are written to stdout.\n\nThe allowed value of <u>LEVEL</u> are:\n<u>0</u>        disabled (default)\n<u>1</u>        errors\n<u>2</u>        warnings\n<u>3</u>        info\n<u>4</u>        debug\n<u>5</u>        internal libraries\n\nIf no argument is given, increase the verbosity or resets it to <u>0</u> if it exceeds the maximum.</a></i4>\n\nOptions:\n",
    "v": "Usage:\n<I4>\n<A> # alignment\n<b>verbose</b> [<u>LEVEL</u>]\n<b>v</b>       [<u>LEVEL</u>]</a></i4>\n\n<I4>\n<A> # alignment\nChange the verbosity level to <u>LEVEL</u> (default is <u>0</u>, which is disabled).\n\nThe messages are written to stdout.\n\nThe allowed value of <u>LEVEL</u> are:\n<u>0</u>        disabled (default)\n<u>1</u>        errors\n<u>2</u>        warnings\n<u>3</u>        info\n<u>4</u>        debug\n<u>5</u>        internal libraries\n\nIf no argument is given, increase the verbosity or resets it to <u>0</u> if it exceeds the maximum.</a></i4>\n\nOptions:\n",
    "pwd": "Usage:\n<I4>\n<A> # alignment\n<b>pwd</b></a></i4>\n\n<I4>\n<A> # alignment\nShow the name of current local working directory.\n\nThe local working directory can be changed with the command <b>cd</b>.</a></i4>\n\nOptions:\n",
    "ls": "Usage:\n<I4>\n<A> # alignment\n<b>ls</b> [<u>OPTION</u>]... [<u>DIR</u>]</a></i4>\n\n<I4>\n<A> # alignment\nList content of the local <u>DIR</u> or the current local directory if no <u>DIR</u> is specified.</a></i4>\n\nOptions:\n<I4>\n                   <A> # alignment\n-a, --all          show hidden files too\n-g, --group        group by file type\n-l                 show more details\n-r, --reverse      reverse sort order\n-S                 show files size\n-s, --sort-size    sort by size</a></i4>",
    "l": "alias for ls -la",
    "tree": "Usage:\n<I4>\n<A> # alignment\n<b>tree</b> [<u>OPTION</u>]... [<u>DIR</u>]</a></i4>\n\n<I4>\n<A> # alignment\nList recursively, in a tree-like format, the local <u>DIR</u> or the current local directory if no <u>DIR</u> is specified.</a></i4>\n\nOptions:\n<I4>\n                       <A> # alignment\n-a, --all              show hidden files too\n-d, --depth  <depth>   maximum display depth of tree\n-g, --group            group by file type\n-l                     show more details\n-r, --reverse          reverse sort order\n-S                     show files size\n-s, --sort-size        sort by size</a></i4>",
    "cd": "Usage:\n<I4>\n<A> # alignment\n<b>cd</b> [<u>DIR</u>]</a></i4>\n\n<I4>\n<A> # alignment\nChange the current local working directory to <u>DIR</u> or to the user's home directory if <u>DIR</u> is not specified.</a></i4>\n\nOptions:\n",
    "mkdir": "Usage:\n<I4>\n<A> # alignment\n<b>mkdir</b> <u>DIR</u></a></i4>\n\n<I4>\n<A> # alignment\nCreate the local directory <u>DIR</u>.\n\nParent directories of <u>DIR</u> are automatically created when needed.\n\nIf <u>DIR</u> already exists, it does nothing.</a></i4>\n\nOptions:\n",
    "cp": "Usage:\n<I4>\n<A> # alignment\n<b>cp</b> <u>SOURCE</u> <u>DEST</u>\n<b>cp</b> <u>SOURCE</u>... <u>DIR</u></a></i4>\n\n<I4>\n<A> # alignment\nCopy local <u>SOURCE</u> file or directory to <u>DEST</u>, or copy multiple </u>SOURCE</u>s to the directory <u>DIR</u>.\n\nIf used with two arguments as \"<b>cp</b> <u>SOURCE</u> <u>DEST</u>\" the following rules are applied:\n  <a>\n- If <u>DEST</u> doesn't exists, <u>SOURCE</u> will copied as <u>DEST</u>\n- If <u>DEST</u> exists and it is a directory, <u>SOURCE</u> will be copied into <u>DEST</u>\n- If <u>DEST</u> exists and it is a file, <u>SOURCE</u> must be a file and it will overwrite <u>DEST</u>\n  </a>\nIf used with at least arguments as \"<b>cp</b> <u>SOURCE</u>... <u>DIR</u>\" then <u>DIR</u> must be an existing directory and <u>SOURCE</u>s will be copied into it.</a></i4>\n\nOptions:\n",
    "mv": "Usage:\n<I4>\n<A> # alignment\n<b>mv</b> <u>SOURCE</u> <u>DEST</u>\n<b>mv</b> <u>SOURCE</u>... <u>DIR</u></a></i4>\n\n<I4>\n<A> # alignment\nMove local <u>SOURCE</u> file or directory to <u>DEST</u>, or move multiple </u>SOURCE</u>s to the directory <u>DIR</u>.\n\nIf used with two arguments as \"<b>mv</b> <u>SOURCE</u> <u>DEST</u>\" the following rules are applied:\n  <a>\n- If <u>DEST</u> doesn't exists, <u>SOURCE</u> will moved as <u>DEST</u>\n- If <u>DEST</u> exists and it is a directory, <u>SOURCE</u> will be moved into <u>DEST</u>\n- If <u>DEST</u> exists and it is a file, <u>SOURCE</u> must be a file and it will overwrite <u>DEST</u>\n  </a>\nIf used with at least arguments as \"<b>mv</b> <u>SOURCE</u>... <u>DIR</u>\" then <u>DIR</u> must be an existing directory and <u>SOURCE</u>s will be moved into it.</a></i4>\n\nOptions:\n",
    "rm": "Usage:\n<I4>\n<A> # alignment\n<b>rm</b> [FILE]...</a></i4>\n\n<I4>\n<A> # alignment\nRemove local <u>FILE</u>s.\n\nIf a <u>FILE</u> is a directory, it will be removed recursively.\n\nIf a <u>FILE</u> does not exists, it will be ignored.\n\nThis commands never prompts: essentially acts like unix's rm -rf.</a></i4>\n\nOptions:\n",
    "exec": "Usage:\n<I4>\n<A> # alignment\n<b>exec</b> <u>COMMAND</u>\n<b>:</b>    <u>COMMAND</u>\n<b>:</b>    <u>COMMAND</u></a></i4>\n\n<I4>\n<A> # alignment\nExecutes an arbitrary <u>COMMAND</u> locally.\n\nThe <u>COMMAND</u> is executed via the shell and therefore allows all the shell features (e.g. variables, glob expansions, redirection).\n\nThis might be useful for execute commands without exiting the easyshare's shell.\n\nThe command can be run either with \"<b>exec</b> <u>COMMAND</u>\",  \"<b>:</b> <u>COMMAND</u>\" or \"<b>:</b><u>COMMAND</u>\".</a></i4>\n\nOptions:\n",
    ":": "Usage:\n<I4>\n<A> # alignment\n<b>exec</b> <u>COMMAND</u>\n<b>:</b>    <u>COMMAND</u>\n<b>:</b>    <u>COMMAND</u></a></i4>\n\n<I4>\n<A> # alignment\nExecutes an arbitrary <u>COMMAND</u> locally.\n\nThe <u>COMMAND</u> is executed via the shell and therefore allows all the shell features (e.g. variables, glob expansions, redirection).\n\nThis might be useful for execute commands without exiting the easyshare's shell.\n\nThe command can be run either with \"<b>exec</b> <u>COMMAND</u>\",  \"<b>:</b> <u>COMMAND</u>\" or \"<b>:</b><u>COMMAND</u>\".</a></i4>\n\nOptions:\n",
    "rpwd": "Usage:\n<I4>\n<A> # alignment\n<b>rpwd</b></a></i4>\n\n<I4>\n<A> # alignment\nShow the name of current remote working directory.\n\nThe remote working directory can be changed with the command <b>rcd</b>.</a></i4>\n\nOptions:\n",
    "rls": "Usage:\n<I4>\n<A> # alignment\n<b>rls</b> [<u>OPTION</u>]... [<u>DIR</u>]\n\n<b>rls</b> [<u>OPTION</u>]... [<u>SHARING_LOCATION</u>] [<u>DIR</u>]</a></i4>\n\n<I4>\n<A> # alignment\nList content of the remote <u>DIR</u> or the current remote directory if no <u>DIR</u> is specified.</a></i4>\n\nOptions:\n<I4>\n                   <A> # alignment\n-a, --all          show hidden files too\n-g, --group        group by file type\n-l                 show more details\n-r, --reverse      reverse sort order\n-S                 show files size\n-s, --sort-size    sort by size</a></i4>",
    "rl": "alias for rls -la",
    "rtree": "Usage:\n<I4>\n<A> # alignment\n\n<b>rtree</b> [<u>OPTION</u>]... [<u>DIR</u>]\n\n<b>rtree</b> [<u>OPTION</u>]... [<u>SHARING_LOCATION</u>] [<u>DIR</u>]</a></i4>\n\n<I4>\n<A> # alignment\nList recursively, in a tree-like format, the remote <u>DIR</u> or the current remote directory if no <u>DIR</u> is specified</a></i4>\n\nOptions:\n<I4>\n                       <A> # alignment\n-a, --all              show hidden files too\n-d, --depth  <depth>   maximum display depth of tree\n-g, --group            group by file type\n-l                     show more details\n-r, --reverse          reverse sort order\n-S                     show files size\n-s, --sort-size        sort by size</a></i4>",
    "rcd": "Usage:\n<I4>\n<A> # alignment\n<b>rcd</b> [<u>DIR</u>]</a></i4>\n\n<I4>\n<A> # alignment\nChange the current remote working directory to <u>DIR</u> or to the root of the current sharing if no <u>DIR</u> is specified.</a></i4>\n\nOptions:\n",
    "rmkdir": "Usage:\n<I4>\n<A> # alignment\n<b>rmkdir</b> <u>DIR</u>\n\n<b>rmkdir</b> [<u>SHARING_LOCATION</u>] <u>DIR</u></a></i4>\n\n<I4>\n<A> # alignment\nCreate the remote directory <u>DIR</u>.\n\nParent directories of <u>DIR</u> are automatically created when needed.\n\nIf <u>DIR</u> already exists, it does nothing.</a></i4>\n\nOptions:\n",
    "rcp": "Usage:\n<I4>\n<A> # alignment\n<b>rcp</b> <u>SOURCE</u> <u>DEST</u>\n<b>rcp</b> <u>SOURCE</u>... <u>DIR</u>\n\n<b>rcp</b> [<u>SHARING_LOCATION</u>] <u>SOURCE</u> <u>DEST</u>\n<b>rcp</b> [<u>SHARING_LOCATION</u>] <u>SOURCE</u>... <u>DIR</u></a></i4>\n\n<I4>\n<A> # alignment\nCopy remote <u>SOURCE</u> file or directory to <u>DEST</u>, or copy multiple </u>SOURCE</u>s to the directory <u>DIR</u>.\n\nIf used with two arguments as \"<b>rcp</b> <u>SOURCE</u> <u>DEST</u>\" the following rules are applied:\n  <a>\n- If <u>DEST</u> doesn't exists, <u>SOURCE</u> will copied as <u>DEST</u>\n- If <u>DEST</u> exists and it is a directory, <u>SOURCE</u> will be copied into <u>DEST</u>\n- If <u>DEST</u> exists and it is a file, <u>SOURCE</u> must be a file and it will overwrite <u>DEST</u>\n  </a>\nIf used with at least arguments as \"<b>rcp</b> <u>SOURCE</u>... <u>DIR</u>\" then <u>DIR</u> must be an existing directory and <u>SOURCE</u>s will be copied into it.</a></i4>\n\nOptions:\n",
    "rmv": "Usage:\n<I4>\n<A> # alignment\n<b>rmv</b> <u>SOURCE</u> <u>DEST</u>\n<b>rmv</b> <u>SOURCE</u>... <u>DIR</u>\n\n<b>rmv</b> [<u>SHARING_LOCATION</u>] <u>SOURCE</u> <u>DEST</u>\n<b>rmv</b> [<u>SHARING_LOCATION</u>] <u>SOURCE</u>... <u>DIR</u></a></i4>\n\n<I4>\n<A> # alignment\nMove remote <u>SOURCE</u> file or directory to <u>DEST</u>, or move multiple </u>SOURCE</u>s to the directory <u>DIR</u>.\n\nIf used with two arguments as \"<b>rmv</b> <u>SOURCE</u> <u>DEST</u>\" the following rules are applied:\n  <a>\n- If <u>DEST</u> doesn't exists, <u>SOURCE</u> will moved as <u>DEST</u>\n- If <u>DEST</u> exists and it is a directory, <u>SOURCE</u> will be moved into <u>DEST</u>\n- If <u>DEST</u> exists and it is a file, <u>SOURCE</u> must be a file and it will overwrite <u>DEST</u>\n  </a>\nIf used with at least arguments as \"<b>rmv</b> <u>SOURCE</u>... <u>DIR</u>\" then <u>DIR</u> must be an existing directory and <u>SOURCE</u>s will be moved into it.</a></i4>\n\nOptions:\n",
    "rrm": "Usage:\n<I4>\n<A> # alignment\n<b>rrm</b> [FILE]...\n\n<b>rrm</b> [<u>SHARING_LOCATION</u>] [FILE]...</a></i4>\n\n<I4>\n<A> # alignment\nRemove remote <u>FILE</u>s.\n\nIf a <u>FILE</u> is a directory, it will be removed recursively.\n\nIf a <u>FILE</u> does not exists, it will be ignored.\n\nThis commands never prompts: essentially acts like unix's rm -rf.</a></i4>\n\nOptions:\n",
    "rexec": "Usage:\n<I4>\n<A> # alignment\n<b>rexec</b> <u>COMMAND</u>\n<b>::</b>    <u>COMMAND</u>\n<b>::</b><u>COMMAND</u>\n\n<b>rexec</b> [<u>SERVER_LOCATION</u>] <u>COMMAND</u>\n<b>::</b>    [<u>SERVER_LOCATION</u>] <u>COMMAND</u>\n<b>::</b>[<u>SERVER_LOCATION</u>] <u>COMMAND</u></a></i4>\n\n<I4>\n<A> # alignment\nTHE SERVER REJECTS THIS COMMAND BY DEFAULT, UNLESS IT HAS BEEN MANUALLY ENABLED WITH THE SETTING \"<u>rexec=true</u>\"\n\nExecutes an arbitrary <u>COMMAND</u> remotely.\n\nThe <u>COMMAND</u> is executed via the shell and therefore allows all the shell features (e.g. variables, glob expansions, redirection).\n\nThis might be useful for execute commands remotely, giving the client a kind of easy and plug-and-play shell.\n\nThe command can be run either with \"<b>rexec</b> <u>COMMAND</u>\",  \"<b>::</b> <u>COMMAND</u>\" or \"<b>::</b><u>COMMAND</u>\".</a></i4>\n\nOptions:\n",
    "::": "Usage:\n<I4>\n<A> # alignment\n<b>rexec</b> <u>COMMAND</u>\n<b>::</b>    <u>COMMAND</u>\n<b>::</b><u>COMMAND</u>\n\n<b>rexec</b> [<u>SERVER_LOCATION</u>] <u>COMMAND</u>\n<b>::</b>    [<u>SERVER_LOCATION</u>] <u>COMMAND</u>\n<b>::</b>[<u>SERVER_LOCATION</u>] <u>COMMAND</u></a></i4>\n\n<I4>\n<A> # alignment\nTHE SERVER REJECTS THIS COMMAND BY DEFAULT, UNLESS IT HAS BEEN MANUALLY ENABLED WITH THE SETTING \"<u>rexec=true</u>\"\n\nExecutes an arbitrary <u>COMMAND</u> remotely.\n\nThe <u>COMMAND</u> is executed via the shell and therefore allows all the shell features (e.g. variables, glob expansions, redirection).\n\nThis might be useful for execute commands remotely, giving the client a kind of easy and plug-and-play shell.\n\nThe command can be run either with \"<b>rexec</b> <u>COMMAND</u>\",  \"<b>::</b> <u>COMMAND</u>\" or \"<b>::</b><u>COMMAND</u>\".</a></i4>\n\nOptions:\n",
    "scan": "Usage:\n<I4>\n<A> # alignment\n<b>scan</b> [<u>OPTION</u>]...\n<b>s</b>    [<u>OPTION</u>]...</a></i4>\n\n<I4>\n<A> # alignment\nScan the network for easyshare server and reports the details of the sharings found.\n\nThe discover is performed in broadcast in the network.\n\nThe port on which the discover is performed is the one specified to <b>es</b> via <b>-d</b> <u>port</u>, or the default one if not specified.\n\nThe scan time is two seconds unless it has been specified to <b>es</b> via <b>-w</b> <u>seconds</u>.\n\nOnly details about the sharings are shown, unless <b>-L</b> is given.</a></i4>\n\nOptions:\n<I4>\n      <A> # alignment\n-L    show more details of both servers and sharings\n-l    show more details of sharings</a></i4>",
    "s": "Usage:\n<I4>\n<A> # alignment\n<b>scan</b> [<u>OPTION</u>]...\n<b>s</b>    [<u>OPTION</u>]...</a></i4>\n\n<I4>\n<A> # alignment\nScan the network for easyshare server and reports the details of the sharings found.\n\nThe discover is performed in broadcast in the network.\n\nThe port on which the discover is performed is the one specified to <b>es</b> via <b>-d</b> <u>port</u>, or the default one if not specified.\n\nThe scan time is two seconds unless it has been specified to <b>es</b> via <b>-w</b> <u>seconds</u>.\n\nOnly details about the sharings are shown, unless <b>-L</b> is given.</a></i4>\n\nOptions:\n<I4>\n      <A> # alignment\n-L    show more details of both servers and sharings\n-l    show more details of sharings</a></i4>",
    "connect": "Usage:\n<I4>\n<A> # alignment\n<b>connect</b> <u>SERVER_LOCATION</u></a></i4>\n\n<I4>\n<A> # alignment\nConnect to a remote server whose location is specified by <u>SERVER_LOCATION</u>.\n\n<u>SERVER_LOCATION</u> has the following syntax:\n<i+4><<u>server_name</u>> or <<u>address</u>>[:<<u>port</u>>]</i>\n\nSee the section <b>EXAMPLES</b> for more examples about <u>SERVER_LOCATION</u>.\n   <a>\nThe following rules are applied for establish a connection:\n1. If <u>SERVER_LOCATION</u> is a valid <<u>server_name</u>> (e.g. alice-arch), a discover is performed for figure out which port the server is bound to.\n2. If <u>SERVER_LOCATION</u> has the form <<u>address</u>> (e.g. 192.168.1.105), the connection will be tried to be established directly to the server at the the default port. If the attempt fails, a discover is performed for figure out which port the server is really bound to and another attempt is done.\n3. If <u>SERVER_LOCATION</u> has the form <<u>address</u>>:<<u>port</u>> (e.g, 182.168.1.106:22020), the connection will be established directly.\n   </a>\nThe discover, if involved (1. and 2.), is performed on the port specified to <b>es</b>with <b>-d</b> <u>port</u> for the time specified with <b>-w</b> <u>seconds</u> (default is two seconds).\n\nNote that <b>connect</b> is not necessary if you want to directly open a sharing, you can use <b>open</b> which automatically will establish the connection with the server as <b>connect</b> would do.\n\nThere might be cases in which use <b>connect</b> is still required, for example for execute server commands (i.e. info, ping, list, rexec) which are not related to any sharings (you can use those commands if connected to a sharing, by the way).\n\nWhen possible, using \"<b>connect</b> <<u>server_name</u>>\" (1.) is more immediate and human friendly compared to specify the address and eventually the port of the server (2. and 3.).\n\nThere are cases in which specify the address and the port of the server (3.) is necessary, for example when the discover can't be performed because the server is not on the same network of the client (e.g. behind a NAT).\n\nIf already connected to a server, a successful <b>connect</b> execution to another server automatically closes the current connection.\n\nRemember that <b>connect</b> establish the connection with the server, but do not place you inside any server's sharing. Use <b>open</b> for that.</a></i4>\n\nOptions:\n",
    "disconnect": "Usage:\n<I4>\n<A> # alignment\n<b>disconnect</b></a></i4>\n\n<I4>\n<A> # alignment\nDisconnect from the remote server to which the connection is established.\n\nWhile this command is the counterpart of <b>connect</b>, it can be used to close connections opened in other ways (i.e. with <b>open</b>).\n\nThis differs from <b>close</b> which closes only the currently opened sharing without closing the connection.</a></i4>\n\nOptions:\n",
    "open": "Usage:\n<I4>\n<A> # alignment\n<b>open</b> <u>SHARING_LOCATION</u>\n<b>o</b>    <u>SHARING_LOCATION</u></a></i4>\n\n<I4>\n<A> # alignment\nOpen a sharing whose location is specified by <u>SHARING_LOCATION</u>\n\n<u>SHARING_LOCATION</u> has the following syntax:\n<i+4><<u>sharing_name</u>>[@<<u>server_name</u>>|<<u>address</u>>[:<<u>port</u>>]]</i>\n\nSee the section <b>EXAMPLES</b> for more examples about <u>SHARING_LOCATION</u>.\n\nThe following rules are applied for establish a connection:\n   <a>\n1. If <u>SHARING_LOCATION</u> is a valid <<u>sharing_name</u>> (e.g. shared), a discover is performed for figure out to which server the sharing belongs to.\n2. If <u>SHARING_LOCATION</u> has the form <<u>sharing_name</u>>@<<u>server_name</u>>[:port] (e.g. shared@alice-arch) a discover is performed as well as in case 1. and the <<u>server_name</u>> and the <<u>port</u>> act only as a filter (i.e. the connection won't be established if they don't match).\n3. If <u>SHARING_LOCATION</u> has the form <<u>sharing_name</u>>@<<u>address</u>> (e.g. shared@192.168.1.105) the connection will be tried to be established directly to the server at the default port. If the attempt fails, a discover is performed for figure out which port the server is really bound to and another attempt is done.\n4. If <u>SHARING_LOCATION</u> has the form <<u>sharing_name</u>>@<<u>address</u>>:<<u>port</u>> (e.g. shared@192.168.1.105:12020) the connection will be established directly.\n   </a>\nThe discover, if involved (1., 2. and 3.), is performed on the port specified to <b>es</b> with <b>-d</b> <u>port</u> for the time specified with <b>-w</b> <u>seconds</u> (default is two seconds).\n\nNote that <b>connect</b> is not necessary if you want to directly open a sharing, you can use <b>open</b> which automatically will establish the connection with the server as <b>connect</b> would do.\n\nWhen possible, using the server name (1., 2. and 3.) is more immediate and human friendly compared to specify the address and eventually the port of the server (4.).\n\nThere are cases in which specify the address and the port of the server (4.) is necessary, for example when the discover can't be performed because the server is not on the same network of the client (e.g. behind a NAT).\n\nIf the sharing described by <u>SHARING_LOCATION</u> is found within the sharings of the server to which the connection is already established, it will be obviously opened without perform any kind of discover or new connection.\n\nIf already connected to a server and/or a sharing, a successful <b>open</b> execution to another server automatically closes the current connection.\n\nIf, for some reason, there is more than a sharing with the same name on the same network, <b>open</b> will try to connect to the one that is discovered first (in general it's unpredictable which will be).\n\nIf you need a deterministic (and more safe) approach, consider using <b>scan</b> for discover the server manually (eventually followed by a consecutive <b>info</b> call for fetch more accurate details such as SSL certificate) then invoke <b>open</b> specifying the server details too (i.e. server name or address and port).\n\nIn general, <b>open</b> doesn't require you to use <b>connect</b> before; the connection will be created for you automatically.</a></i4>\n\nOptions:\n",
    "o": "Usage:\n<I4>\n<A> # alignment\n<b>open</b> <u>SHARING_LOCATION</u>\n<b>o</b>    <u>SHARING_LOCATION</u></a></i4>\n\n<I4>\n<A> # alignment\nOpen a sharing whose location is specified by <u>SHARING_LOCATION</u>\n\n<u>SHARING_LOCATION</u> has the following syntax:\n<i+4><<u>sharing_name</u>>[@<<u>server_name</u>>|<<u>address</u>>[:<<u>port</u>>]]</i>\n\nSee the section <b>EXAMPLES</b> for more examples about <u>SHARING_LOCATION</u>.\n\nThe following rules are applied for establish a connection:\n   <a>\n1. If <u>SHARING_LOCATION</u> is a valid <<u>sharing_name</u>> (e.g. shared), a discover is performed for figure out to which server the sharing belongs to.\n2. If <u>SHARING_LOCATION</u> has the form <<u>sharing_name</u>>@<<u>server_name</u>>[:port] (e.g. shared@alice-arch) a discover is performed as well as in case 1. and the <<u>server_name</u>> and the <<u>port</u>> act only as a filter (i.e. the connection won't be established if they don't match).\n3. If <u>SHARING_LOCATION</u> has the form <<u>sharing_name</u>>@<<u>address</u>> (e.g. shared@192.168.1.105) the connection will be tried to be established directly to the server at the default port. If the attempt fails, a discover is performed for figure out which port the server is really bound to and another attempt is done.\n4. If <u>SHARING_LOCATION</u> has the form <<u>sharing_name</u>>@<<u>address</u>>:<<u>port</u>> (e.g. shared@192.168.1.105:12020) the connection will be established directly.\n   </a>\nThe discover, if involved (1., 2. and 3.), is performed on the port specified to <b>es</b> with <b>-d</b> <u>port</u> for the time specified with <b>-w</b> <u>seconds</u> (default is two seconds).\n\nNote that <b>connect</b> is not necessary if you want to directly open a sharing, you can use <b>open</b> which automatically will establish the connection with the server as <b>connect</b> would do.\n\nWhen possible, using the server name (1., 2. and 3.) is more immediate and human friendly compared to specify the address and eventually the port of the server (4.).\n\nThere are cases in which specify the address and the port of the server (4.) is necessary, for example when the discover can't be performed because the server is not on the same network of the client (e.g. behind a NAT).\n\nIf the sharing described by <u>SHARING_LOCATION</u> is found within the sharings of the server to which the connection is already established, it will be obviously opened without perform any kind of discover or new connection.\n\nIf already connected to a server and/or a sharing, a successful <b>open</b> execution to another server automatically closes the current connection.\n\nIf, for some reason, there is more than a sharing with the same name on the same network, <b>open</b> will try to connect to the one that is discovered first (in general it's unpredictable which will be).\n\nIf you need a deterministic (and more safe) approach, consider using <b>scan</b> for discover the server manually (eventually followed by a consecutive <b>info</b> call for fetch more accurate details such as SSL certificate) then invoke <b>open</b> specifying the server details too (i.e. server name or address and port).\n\nIn general, <b>open</b> doesn't require you to use <b>connect</b> before; the connection will be created for you automatically.</a></i4>\n\nOptions:\n",
    "close": "Usage:\n<I4>\n<A> # alignment\n<b>close</b>\n<b>c</b></a></i4>\n\n<I4>\n<A> # alignment\nClose the currently opened sharing.\n\nIf the sharing connection has been created directly with <b>open</b> instead of <b>connect</b> and then <b>open</b>, than the server connection is closed too (for symmetry).</a></i4>\n\nOptions:\n",
    "c": "Usage:\n<I4>\n<A> # alignment\n<b>close</b>\n<b>c</b></a></i4>\n\n<I4>\n<A> # alignment\nClose the currently opened sharing.\n\nIf the sharing connection has been created directly with <b>open</b> instead of <b>connect</b> and then <b>open</b>, than the server connection is closed too (for symmetry).</a></i4>\n\nOptions:\n",
    "get": "Usage:\n<I4>\n<A> # alignment\n<b>get</b> [OPTION]... [<u>REMOTE_FILE</u>]...\n<b>g</b>   [OPTION]... [<u>REMOTE_FILE</u>]...\n\n<b>get</b> [OPTION]... [<u>SHARING_LOCATION</u>] [<u>REMOTE_FILE</u>]...\n<b>g</b>   [OPTION]... [<u>SHARING_LOCATION</u>] [<u>REMOTE_FILE</u>]...</a></i4>\n\n<I4>\n<A> # alignment\nGet files and directories from a remote sharing to the local machine.\n\n\nThis command can be used for two similar purpose:\n   <A>\n1. Download either files or directory from a \"directory sharing\"\n2. Download a \"file sharing\" (i.e. a single file with a sharing name assigned to it).\n</a>\nIn case 1. a connection to the remote sharing have to be established in one of the following manners:\n    <A>\n1a. Create a connection to the sharing with <b>connect</b> and/or <b>open</b>\n1b. Provide a <u>SHARING_LOCATION</u> to the <b>get</b> command (e.g. get alice-arch temp)\n    </A>\n    \nIf execute while connected to a \"directory sharing\" (1.) the following rules are applied:\n  <A>\n- If <u>REMOTE_FILE</u>s arguments are given, then the specified remote files are downloaded into the local directory\n- If no <u>REMOTE_FILE</u> argument is given, then the entire sharing is downloaded into the local directory within a folder that has he same name as the sharing\n- If <u>REMOTE_FILE</u> is \"*\", then the entire sharing is downloaded into the local directory (without wrapping it into a folder)\n  </A>\n  \nFor download a \"file sharing\" (2.), <b>get</b> must be used in the form \"<b>get</b> [<u>SHARING_LOCATION</u>]\" (e.g. get alice-arch file) and there is no need to <b>open</b> the sharing before (since it's a file), as in case 1. \n\n<u>REMOTE_FILE</u> can be:\n  <A>\n- a path relative to the current remote working directory (<b>rpwd</b>), (e.g. afile, adir/afile)\n- a path absolute with respect to the sharing root, which is defined by a leading slash (e.g. /f1)\n  </A>\n  \nThe files will be placed into the current local directory (which can be changed with <b>cd</b>, inside or outside <b>es</b>).\n\nDirectories are automatically downloaded recursively.\n\nIf a remote file has the same name of a local file, you will be asked whether overwrite it or not. The default overwrite behaviour can be specified with the options <b>-y</b> (yes), <b>-n</b> (no), <b>N</b> (newer).</a></i4>\n\nOptions:\n<I4>\n               <A> # alignment\n-c, --check    performs a check of files consistency\n-N, --newer    overwrite files only if newer\n-n, --no       never overwrite files\n-q, --quiet    doesn't show progress\n-y, --yes      always overwrite files</a></i4>",
    "g": "Usage:\n<I4>\n<A> # alignment\n<b>get</b> [OPTION]... [<u>REMOTE_FILE</u>]...\n<b>g</b>   [OPTION]... [<u>REMOTE_FILE</u>]...\n\n<b>get</b> [OPTION]... [<u>SHARING_LOCATION</u>] [<u>REMOTE_FILE</u>]...\n<b>g</b>   [OPTION]... [<u>SHARING_LOCATION</u>] [<u>REMOTE_FILE</u>]...</a></i4>\n\n<I4>\n<A> # alignment\nGet files and directories from a remote sharing to the local machine.\n\n\nThis command can be used for two similar purpose:\n   <A>\n1. Download either files or directory from a \"directory sharing\"\n2. Download a \"file sharing\" (i.e. a single file with a sharing name assigned to it).\n</a>\nIn case 1. a connection to the remote sharing have to be established in one of the following manners:\n    <A>\n1a. Create a connection to the sharing with <b>connect</b> and/or <b>open</b>\n1b. Provide a <u>SHARING_LOCATION</u> to the <b>get</b> command (e.g. get alice-arch temp)\n    </A>\n    \nIf execute while connected to a \"directory sharing\" (1.) the following rules are applied:\n  <A>\n- If <u>REMOTE_FILE</u>s arguments are given, then the specified remote files are downloaded into the local directory\n- If no <u>REMOTE_FILE</u> argument is given, then the entire sharing is downloaded into the local directory within a folder that has he same name as the sharing\n- If <u>REMOTE_FILE</u> is \"*\", then the entire sharing is downloaded into the local directory (without wrapping it into a folder)\n  </A>\n  \nFor download a \"file sharing\" (2.), <b>get</b> must be used in the form \"<b>get</b> [<u>SHARING_LOCATION</u>]\" (e.g. get alice-arch file) and there is no need to <b>open</b> the sharing before (since it's a file), as in case 1. \n\n<u>REMOTE_FILE</u> can be:\n  <A>\n- a path relative to the current remote working directory (<b>rpwd</b>), (e.g. afile, adir/afile)\n- a path absolute with respect to the sharing root, which is defined by a leading slash (e.g. /f1)\n  </A>\n  \nThe files will be placed into the current local directory (which can be changed with <b>cd</b>, inside or outside <b>es</b>).\n\nDirectories are automatically downloaded recursively.\n\nIf a remote file has the same name of a local file, you will be asked whether overwrite it or not. The default overwrite behaviour can be specified with the options <b>-y</b> (yes), <b>-n</b> (no), <b>N</b> (newer).</a></i4>\n\nOptions:\n<I4>\n               <A> # alignment\n-c, --check    performs a check of files consistency\n-N, --newer    overwrite files only if newer\n-n, --no       never overwrite files\n-q, --quiet    doesn't show progress\n-y, --yes      always overwrite files</a></i4>",
    "put": "Usage:\n<I4>\n<A> # alignment\n<b>put</b> [OPTION]... [<u>LOCAL_FILE</u>]...\n<b>p</b>   [OPTION]... [<u>LOCAL_FILE</u>]...\n\n<b>put</b> [OPTION]... [<u>SHARING_LOCATION</u>] [<u>LOCAL_FILE</u>]...\n<b>p</b>   [OPTION]... [<u>SHARING_LOCATION</u>] [<u>LOCAL_FILE</u>]...</a></i4>\n\n<I4>\n<A> # alignment\nPut files and directories into a remote sharing.\n\nThe remote sharing must be of type \"directory sharing\", otherwise <b>put</b> will fail.\n\nThe connection to the remote sharing have to be established in one of the following manners:\n  <A>\n- Create a connection to the sharing with <b>connect</b> and/or <b>open</b>\n- Provide a <u>SHARING_LOCATION</u> to the <b>put</b> command (e.g. put alice-arch f1)\n  </A>\n    \nIf execute while connected to a \"directory sharing\" (1.) the following rules are applied:\n  <A>\n- If <u>LOCAL_FILE</u>s arguments are given, then the specified local files are uploaded into the remote directory\n- If no <u>LOCAL_FILE</u> argument is given, then the entire local folder is uploaded into the remote sharing within a folder that has he same name as the folder\n- If <u>LOCAL_FILE</u> is \"*\", then the entire local folder is uploaded into the remote sharing (without wrapping it into a folder)\n  </A>\n\n<u>LOCAL_FILE</u> must be a path to a local valid file or directory, either relative or absolute.\n  \nThe files will be placed into the current remote directory (which can be changed with <b>rcd</b>).\nThe default remote directory is the root of the \"directory sharing\".\n\nDirectories are automatically uploaded recursively.\n\nIf a remote file has the same name of a local file, you will be asked whether overwrite it or not. The default overwrite behaviour can be specified with the options <b>-y</b> (yes), <b>-n</b> (no), <b>N</b> (newer).</a></i4>\n\nOptions:\n<I4>\n               <A> # alignment\n-c, --check    performs a check of files consistency\n-N, --newer    overwrite files only if newer\n-n, --no       never overwrite files\n-q, --quiet    doesn't show progress\n-y, --yes      always overwrite files</a></i4>",
    "p": "Usage:\n<I4>\n<A> # alignment\n<b>put</b> [OPTION]... [<u>LOCAL_FILE</u>]...\n<b>p</b>   [OPTION]... [<u>LOCAL_FILE</u>]...\n\n<b>put</b> [OPTION]... [<u>SHARING_LOCATION</u>] [<u>LOCAL_FILE</u>]...\n<b>p</b>   [OPTION]... [<u>SHARING_LOCATION</u>] [<u>LOCAL_FILE</u>]...</a></i4>\n\n<I4>\n<A> # alignment\nPut files and directories into a remote sharing.\n\nThe remote sharing must be of type \"directory sharing\", otherwise <b>put</b> will fail.\n\nThe connection to the remote sharing have to be established in one of the following manners:\n  <A>\n- Create a connection to the sharing with <b>connect</b> and/or <b>open</b>\n- Provide a <u>SHARING_LOCATION</u> to the <b>put</b> command (e.g. put alice-arch f1)\n  </A>\n    \nIf execute while connected to a \"directory sharing\" (1.) the following rules are applied:\n  <A>\n- If <u>LOCAL_FILE</u>s arguments are given, then the specified local files are uploaded into the remote directory\n- If no <u>LOCAL_FILE</u> argument is given, then the entire local folder is uploaded into the remote sharing within a folder that has he same name as the folder\n- If <u>LOCAL_FILE</u> is \"*\", then the entire local folder is uploaded into the remote sharing (without wrapping it into a folder)\n  </A>\n\n<u>LOCAL_FILE</u> must be a path to a local valid file or directory, either relative or absolute.\n  \nThe files will be placed into the current remote directory (which can be changed with <b>rcd</b>).\nThe default remote directory is the root of the \"directory sharing\".\n\nDirectories are automatically uploaded recursively.\n\nIf a remote file has the same name of a local file, you will be asked whether overwrite it or not. The default overwrite behaviour can be specified with the options <b>-y</b> (yes), <b>-n</b> (no), <b>N</b> (newer).</a></i4>\n\nOptions:\n<I4>\n               <A> # alignment\n-c, --check    performs a check of files consistency\n-N, --newer    overwrite files only if newer\n-n, --no       never overwrite files\n-q, --quiet    doesn't show progress\n-y, --yes      always overwrite files</a></i4>",
    "list": "Usage:\n<I4>\n<A> # alignment\n<b>list</b> [<u>OPTION</u>]...\n<b>list</b> [<u>SERVER_LOCATION</u>] [<u>OPTION</u>]...</a></i4>\n\n<I4>\n<A> # alignment\nList the sharings of the remote server to which the connection is established.</a></i4>\n\nOptions:\n<I4>\n      <A> # alignment\n-l    show more details of sharings</a></i4>",
    "info": "Usage:\n<I4>\n<A> # alignment\n<b>info</b> [<u>OPTION</u>]...\n<b>i</b>    [<u>OPTION</u>]...\n\n<b>info</b> [<u>SERVER_LOCATION</u>] [<u>OPTION</u>]...\n<b>i</b>    [<u>SERVER_LOCATION</u>] [<u>OPTION</u>]...</a></i4>\n\n<I4>\n<A> # alignment\nShow information of the remote server to which the connection is established.\n\nThe reported information are: \n- Server name\n- Server ip\n- Server port\n- Server discover port\n- Authentication enabled/disabled\n- SSL enabled/disabled \n- SSL certificate info (if enabled)\n- Sharings</a></i4>\n\nOptions:\n<I4>\n      <A> # alignment\n-l    show more details of sharings</a></i4>",
    "i": "Usage:\n<I4>\n<A> # alignment\n<b>info</b> [<u>OPTION</u>]...\n<b>i</b>    [<u>OPTION</u>]...\n\n<b>info</b> [<u>SERVER_LOCATION</u>] [<u>OPTION</u>]...\n<b>i</b>    [<u>SERVER_LOCATION</u>] [<u>OPTION</u>]...</a></i4>\n\n<I4>\n<A> # alignment\nShow information of the remote server to which the connection is established.\n\nThe reported information are: \n- Server name\n- Server ip\n- Server port\n- Server discover port\n- Authentication enabled/disabled\n- SSL enabled/disabled \n- SSL certificate info (if enabled)\n- Sharings</a></i4>\n\nOptions:\n<I4>\n      <A> # alignment\n-l    show more details of sharings</a></i4>",
    "ping": "Usage:\n<I4>\n<A> # alignment\n<b>ping</b> [<u>OPTION</u>]...\n\n<b>ping</b> [<u>OPTION</u>]... [<u>SERVER_LOCATION</u>]</a></i4>\n\n<I4>\n<A> # alignment\nTest the connectivity with the server by sending application-level messages.</a></i4>\n\nOptions:\n<I4>\n                       <A> # alignment\n-c, --count  <count>   stop after <u>count</u> messages</a></i4>",
    "es": "Usage:\n<I4>\n<A> # alignment\nes [<u>OPTION</u>]... [<u>COMMAND</u> [<u>COMMAND_ARGUMENTS</u>]]</a></i4>\n\n<I4>\n<A> # alignment\nIf no <b>COMMAND</b> is given, the interactive console is started.\nIf <b>COMMAND</b> is a valid command, it is executed and the process quits unless the command is <b>open</b>.\n\nType \"<b>help <u>command</u>\" for the full documentation of a <u>command</u>.\n\nCommands:   \n<I4>\n                    <A>\nhelp                show this help\nexit, quit, q       exit from the interactive shell\ntrace, t            enable/disable packet tracing\nverbose, v          change verbosity level\n</i>\n<I4>\nscan, s             scan the network for easyshare servers\nconnect             connect to a remote server\ndisconnect          disconnect from a remote server\nopen, o             open a remote sharing (eventually discovering it)\nclose, c            close the remote sharing\n</i>\n<I4>\nget, g              get files and directories from the remote sharing\nput, p              put files and directories in the remote sharing\n</i>\n<I4>\npwd                 show the name of current local working directory\nls                  list local directory content\nl                   alias for ls -la\ntree                list local directory contents in a tree-like format\ncd                  change local working directory\nmkdir               create a local directory\ncp                  copy files and directories locally\nmv                  move files and directories locally\nrm                  remove files and directories locally\nexec, :             execute an arbitrary command locally\n</i>\n<I4>\nrpwd                show the name of current remote working directory\nrls                 list remote directory content\nrl                  alias for rls -la\nrtree               list remote directory contents in a tree-like format\nrcd                 change remote working directory\nrmkdir              create a remote directory\nrcp                 copy files and directories remotely\nrmv                 move files and directories remotely\nrrm                 remove files and directories remotely\nrexec, ::           execute an arbitrary command remotely (disabled by default) since it will compromise server security\n</i>\n<I4>\ninfo, i             show information about the remote server\nlist                list the sharings of the remote server\nping                test the connection with the remote server</i></a></a></i4>\n\nOptions:\n<I4>\n                                 <A> # alignment\n--no-color                       don't print ANSI escape characters\n-d, --discover-port  <port>      port used for broadcast discovery messages\n-h, --help                       show this help\n-t, --trace  <0_or_1>            enable/disable tracing\n-v, --verbose  <level>           set verbosity level\n-V, --version                    show the easyshare version\n-w, --discover-wait  <seconds>   time to wait for discovery responses</a></i4>",
    "esd": "Usage:\n<I4>\n<A> # alignment\nesd [<u>OPTION</u>]... [<u>SHARING</u> [<u>SHARING_NAME</u>] [<u>SHARING_OPTION</u>]...]</a></i4>\n\n<I4>\n<A> # alignment\nServer of the easyshare network application.\n\nFiles and directories can be shared in one of the following manners:\n   <A>\n1. By providing the path of the file/directory to share in the command line as <u>SHARING</u> \n2. By creating a configuration file and specifying it with the option <b>-c</b> <u>config</u>.\n</A>\n\nThe option 1. should be preferred for an easy one-shot sharing of a file or directory, since doesn't need the creation a configuration file, but has the limit that only a file or folder can be shared.\n\nIf given, <u>SHARING</u> must be a valid path to a local file or directory.\n<u>SHARING_NAME</u> is an optional name to assign to the sharing, as it will be seen by clients. If not given, the name of the file/directory is used instead.\nCurrently the only supported <u>SHARING_OPTION</u> is the read-only flag, which can be enabled with <b>-r</b>, and denies any write operation on a directory sharing.\n\nThe server can be configured either with a configuration file (2.) or by giving <b>esd</b> the options you need. The command line arguments have precedence over the corresponding setting of the configuration file (i.e. if you specify an option in both the configuration file and as an argument, the argument will be taken into account).\n\nThe configuration file is composed of two parts.\n   <A>\n1. Global section\n2. Sharings sections\n</A>\n\nEach line of a section has the form <u><key></u>=<u><value></u>.\nThe available <u><key></u> of the global section are:\n<I+4>\n<b>name</b>\n<b>address</b>\n<b>port</b>\n<b>discover_port</b>\n<b>password</b>\n<b>ssl</b>\n<b>ssl_cert</b>\n<b>ssl_privkey</b>\n<b>verbose</b>\n<b>trace</b>\n</I>\n\nThe available <u><key></u> of the sharings sections are:\n<I+4>\n<b>path</b>\n<b>readonly</b>\n</I>\n\nThe first lines of the configuration file belongs to the global section by default.\nEach sharing section begins with \"[<u>SHARING_NAME</u>]\".\nIf you omit the <u>SHARING_NAME</u>, the name of the shared file or directory will be used instead.\n\nSee the section <b>EXAMPLES</b> for an example of a configuration file.\n\nYou might consider using <b>es-tools</b> for some facilities, such as:\n  <A>\n- Create a default configuration file\n- Create a secure hash of a password, useful for avoid to give a plain password to <b>esd</b>.</a></a></i4>\n\nOptions:\n<I4>\n                                <A> # alignment\n--no-color                      don't print ANSI escape characters\n--ssl-cert  <cert_path>         path to an SSL certificate\n--ssl-privkey  <privkey_path>   path to an SSL private key\n-a, --address  <address>        server address (default is primary interface)\n-c, --config  <config_path>     load settings from a esd configuration file\n-d, --discover-port  <port>     port used to listen to discovery messages (default is 12021)\n-e, --rexec                     enable rexec (remote execution)\n-h, --help                      show this help\n-n, --name  <name>              server name\n-P, --password  <password>      server password, plain or hashed with es-tools\n-p, --port  <port>              server port (default is 12020)\n-t, --trace  <0_or_1>           enable/disable tracing\n-v, --verbose  <level>          set verbosity level\n-V, --version                   show the easyshare version</a></i4>",
    "usage": "Type <b>es<b> <u>--help</u> for see <b>es</b> usage and options.\nType <b>help <u>command</u> for the full documentation of a <u>command</u>.\n\nAvailable commands are:     \n                    <a>\n<b>General commands</b>\n<I4>\nhelp                show this help\nexit, quit, q       exit from the interactive shell\ntrace, t            enable/disable packet tracing\nverbose, v          change verbosity level\n</i>\n<b>Connection establishment commands</b>\n<I4>\nscan, s             scan the network for easyshare servers\nconnect             connect to a remote server\ndisconnect          disconnect from a remote server\nopen, o             open a remote sharing (eventually discovering it)\nclose, c            close the remote sharing\n</i>\n<b>Transfer commands</b>\n<I4>\nget, g              get files and directories from the remote sharing\nput, p              put files and directories in the remote sharing\n</i>\n<b>Local commands</b>\n<I4>\npwd                 show the name of current local working directory\nls                  list local directory content\nl                   alias for ls -la\ntree                list local directory contents in a tree-like format\ncd                  change local working directory\nmkdir               create a local directory\ncp                  copy files and directories locally\nmv                  move files and directories locally\nrm                  remove files and directories locally\nexec, :             execute an arbitrary command locally\n</i>\n<b>Remote commands</b>\n<I4>\nrpwd                show the name of current remote working directory\nrls                 list remote directory content\nrl                  alias for rls -la\nrtree               list remote directory contents in a tree-like format\nrcd                 change remote working directory\nrmkdir              create a remote directory\nrcp                 copy files and directories remotely\nrmv                 move files and directories remotely\nrrm                 remove files and directories remotely\nrexec, ::           execute an arbitrary command remotely (disabled by default) since it will compromise server security\n</i>\n<b>Server information commands</b>\n<I4>\ninfo, i             show information about the remote server\nlist                list the sharings of the remote server\nping                test the connection with the remote server</i></a>"
}
