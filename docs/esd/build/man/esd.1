.\" Man page generated from reStructuredText.
.
.TH "ESD" "1" "May 10, 2020" "" "esd"
.SH NAME
esd \- esd 0.1
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
\fI\%Build Status\fP
.sp
youtube\-dl \- download videos from youtube.com or other video platforms
.INDENT 0.0
.IP \(bu 2
\fI\%INSTALLATION\fP
.IP \(bu 2
\fI\%DESCRIPTION\fP
.IP \(bu 2
\fI\%OPTIONS\fP
.IP \(bu 2
\fI\%CONFIGURATION\fP
.IP \(bu 2
\fI\%OUTPUT TEMPLATE\fP
.IP \(bu 2
\fI\%FORMAT SELECTION\fP
.IP \(bu 2
\fI\%VIDEO SELECTION\fP
.IP \(bu 2
\fI\%FAQ\fP
.IP \(bu 2
\fI\%DEVELOPER INSTRUCTIONS\fP
.IP \(bu 2
\fI\%EMBEDDING YOUTUBE\-DL\fP
.IP \(bu 2
\fI\%BUGS\fP
.IP \(bu 2
\fI\%COPYRIGHT\fP
.UNINDENT
.SH INSTALLATION
.sp
To install it right away for all UNIX users (Linux, macOS, etc.), type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo curl \-L https://yt\-dl.org/downloads/latest/youtube\-dl \-o /usr/local/bin/youtube\-dl
sudo chmod a+rx /usr/local/bin/youtube\-dl
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you do not have curl, you can alternatively use a recent wget:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo wget https://yt\-dl.org/downloads/latest/youtube\-dl \-O /usr/local/bin/youtube\-dl
sudo chmod a+rx /usr/local/bin/youtube\-dl
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Windows users can \fI\%download an .exe file\fP and place it in any location on their \fI\%PATH\fP except for \fB%SYSTEMROOT%\eSystem32\fP (e.g. \fBdo not\fP put in \fBC:\eWindows\eSystem32\fP).
.sp
You can also use pip:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo \-H pip install \-\-upgrade youtube\-dl
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This command will update youtube\-dl if you have already installed it. See the \fI\%pypi page\fP for more information.
.sp
macOS users can install youtube\-dl with \fI\%Homebrew\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
brew install youtube\-dl
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Or with \fI\%MacPorts\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo port install youtube\-dl
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Alternatively, refer to the \fI\%developer instructions\fP for how to check out and work with the git repository. For further options, including PGP signatures, see the \fI\%youtube\-dl Download Page\fP\&.
.SH DESCRIPTION
.sp
\fByoutube\-dl\fP is a command\-line program to download videos from YouTube.com and a few more sites. It requires the Python interpreter, version 2.6, 2.7, or 3.2+, and it is not platform specific. It should work on your Unix box, on Windows or on macOS. It is released to the public domain, which means you can modify it, redistribute it or use it however you like.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
youtube\-dl [OPTIONS] URL [URL...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SH OPTIONS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-h, \-\-help                       Print this help text and exit
\-\-version                        Print program version and exit
\-U, \-\-update                     Update this program to latest version. Make
                                 sure that you have sufficient permissions
                                 (run with sudo if needed)
\-i, \-\-ignore\-errors              Continue on download errors, for example to
                                 skip unavailable videos in a playlist
\-\-abort\-on\-error                 Abort downloading of further videos (in the
                                 playlist or the command line) if an error
                                 occurs
\-\-dump\-user\-agent                Display the current browser identification
\-\-list\-extractors                List all supported extractors
\-\-extractor\-descriptions         Output descriptions of all supported
                                 extractors
\-\-force\-generic\-extractor        Force extraction to use the generic
                                 extractor
\-\-default\-search PREFIX          Use this prefix for unqualified URLs. For
                                 example "gvsearch2:" downloads two videos
                                 from google videos for youtube\-dl "large
                                 apple". Use the value "auto" to let
                                 youtube\-dl guess ("auto_warning" to emit a
                                 warning when guessing). "error" just throws
                                 an error. The default value "fixup_error"
                                 repairs broken URLs, but emits an error if
                                 this is not possible instead of searching.
\-\-ignore\-config                  Do not read configuration files. When given
                                 in the global configuration file
                                 /etc/youtube\-dl.conf: Do not read the user
                                 configuration in ~/.config/youtube\-
                                 dl/config (%APPDATA%/youtube\-dl/config.txt
                                 on Windows)
\-\-config\-location PATH           Location of the configuration file; either
                                 the path to the config or its containing
                                 directory.
\-\-flat\-playlist                  Do not extract the videos of a playlist,
                                 only list them.
\-\-mark\-watched                   Mark videos watched (YouTube only)
\-\-no\-mark\-watched                Do not mark videos watched (YouTube only)
\-\-no\-color                       Do not emit color codes in output
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Network Options:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-proxy URL                      Use the specified HTTP/HTTPS/SOCKS proxy.
                                 To enable SOCKS proxy, specify a proper
                                 scheme. For example
                                 socks5://127.0.0.1:1080/. Pass in an empty
                                 string (\-\-proxy "") for direct connection
\-\-socket\-timeout SECONDS         Time to wait before giving up, in seconds
\-\-source\-address IP              Client\-side IP address to bind to
\-4, \-\-force\-ipv4                 Make all connections via IPv4
\-6, \-\-force\-ipv6                 Make all connections via IPv6
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Geo Restriction:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-geo\-verification\-proxy URL     Use this proxy to verify the IP address for
                                 some geo\-restricted sites. The default
                                 proxy specified by \-\-proxy (or none, if the
                                 option is not present) is used for the
                                 actual downloading.
\-\-geo\-bypass                     Bypass geographic restriction via faking
                                 X\-Forwarded\-For HTTP header
\-\-no\-geo\-bypass                  Do not bypass geographic restriction via
                                 faking X\-Forwarded\-For HTTP header
\-\-geo\-bypass\-country CODE        Force bypass geographic restriction with
                                 explicitly provided two\-letter ISO 3166\-2
                                 country code
\-\-geo\-bypass\-ip\-block IP_BLOCK   Force bypass geographic restriction with
                                 explicitly provided IP block in CIDR
                                 notation
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Video Selection:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-playlist\-start NUMBER          Playlist video to start at (default is 1)
\-\-playlist\-end NUMBER            Playlist video to end at (default is last)
\-\-playlist\-items ITEM_SPEC       Playlist video items to download. Specify
                                 indices of the videos in the playlist
                                 separated by commas like: "\-\-playlist\-items
                                 1,2,5,8" if you want to download videos
                                 indexed 1, 2, 5, 8 in the playlist. You can
                                 specify range: "\-\-playlist\-items
                                 1\-3,7,10\-13", it will download the videos
                                 at index 1, 2, 3, 7, 10, 11, 12 and 13.
\-\-match\-title REGEX              Download only matching titles (regex or
                                 caseless sub\-string)
\-\-reject\-title REGEX             Skip download for matching titles (regex or
                                 caseless sub\-string)
\-\-max\-downloads NUMBER           Abort after downloading NUMBER files
\-\-min\-filesize SIZE              Do not download any videos smaller than
                                 SIZE (e.g. 50k or 44.6m)
\-\-max\-filesize SIZE              Do not download any videos larger than SIZE
                                 (e.g. 50k or 44.6m)
\-\-date DATE                      Download only videos uploaded in this date
\-\-datebefore DATE                Download only videos uploaded on or before
                                 this date (i.e. inclusive)
\-\-dateafter DATE                 Download only videos uploaded on or after
                                 this date (i.e. inclusive)
\-\-min\-views COUNT                Do not download any videos with less than
                                 COUNT views
\-\-max\-views COUNT                Do not download any videos with more than
                                 COUNT views
\-\-match\-filter FILTER            Generic video filter. Specify any key (see
                                 the "OUTPUT TEMPLATE" for a list of
                                 available keys) to match if the key is
                                 present, !key to check if the key is not
                                 present, key > NUMBER (like "comment_count
                                 > 12", also works with >=, <, <=, !=, =) to
                                 compare against a number, key = \(aqLITERAL\(aq
                                 (like "uploader = \(aqMike Smith\(aq", also works
                                 with !=) to match against a string literal
                                 and & to require multiple matches. Values
                                 which are not known are excluded unless you
                                 put a question mark (?) after the operator.
                                 For example, to only match videos that have
                                 been liked more than 100 times and disliked
                                 less than 50 times (or the dislike
                                 functionality is not available at the given
                                 service), but who also have a description,
                                 use \-\-match\-filter "like_count > 100 &
                                 dislike_count <? 50 & description" .
\-\-no\-playlist                    Download only the video, if the URL refers
                                 to a video and a playlist.
\-\-yes\-playlist                   Download the playlist, if the URL refers to
                                 a video and a playlist.
\-\-age\-limit YEARS                Download only videos suitable for the given
                                 age
\-\-download\-archive FILE          Download only videos not listed in the
                                 archive file. Record the IDs of all
                                 downloaded videos in it.
\-\-include\-ads                    Download advertisements as well
                                 (experimental)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Download Options:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-r, \-\-limit\-rate RATE            Maximum download rate in bytes per second
                                 (e.g. 50K or 4.2M)
\-R, \-\-retries RETRIES            Number of retries (default is 10), or
                                 "infinite".
\-\-fragment\-retries RETRIES       Number of retries for a fragment (default
                                 is 10), or "infinite" (DASH, hlsnative and
                                 ISM)
\-\-skip\-unavailable\-fragments     Skip unavailable fragments (DASH, hlsnative
                                 and ISM)
\-\-abort\-on\-unavailable\-fragment  Abort downloading when some fragment is not
                                 available
\-\-keep\-fragments                 Keep downloaded fragments on disk after
                                 downloading is finished; fragments are
                                 erased by default
\-\-buffer\-size SIZE               Size of download buffer (e.g. 1024 or 16K)
                                 (default is 1024)
\-\-no\-resize\-buffer               Do not automatically adjust the buffer
                                 size. By default, the buffer size is
                                 automatically resized from an initial value
                                 of SIZE.
\-\-http\-chunk\-size SIZE           Size of a chunk for chunk\-based HTTP
                                 downloading (e.g. 10485760 or 10M) (default
                                 is disabled). May be useful for bypassing
                                 bandwidth throttling imposed by a webserver
                                 (experimental)
\-\-playlist\-reverse               Download playlist videos in reverse order
\-\-playlist\-random                Download playlist videos in random order
\-\-xattr\-set\-filesize             Set file xattribute ytdl.filesize with
                                 expected file size
\-\-hls\-prefer\-native              Use the native HLS downloader instead of
                                 ffmpeg
\-\-hls\-prefer\-ffmpeg              Use ffmpeg instead of the native HLS
                                 downloader
\-\-hls\-use\-mpegts                 Use the mpegts container for HLS videos,
                                 allowing to play the video while
                                 downloading (some players may not be able
                                 to play it)
\-\-external\-downloader COMMAND    Use the specified external downloader.
                                 Currently supports
                                 aria2c,avconv,axel,curl,ffmpeg,httpie,wget
\-\-external\-downloader\-args ARGS  Give these arguments to the external
                                 downloader
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Filesystem Options:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-a, \-\-batch\-file FILE            File containing URLs to download (\(aq\-\(aq for
                                 stdin), one URL per line. Lines starting
                                 with \(aq#\(aq, \(aq;\(aq or \(aq]\(aq are considered as
                                 comments and ignored.
\-\-id                             Use only video ID in file name
\-o, \-\-output TEMPLATE            Output filename template, see the "OUTPUT
                                 TEMPLATE" for all the info
\-\-autonumber\-start NUMBER        Specify the start value for %(autonumber)s
                                 (default is 1)
\-\-restrict\-filenames             Restrict filenames to only ASCII
                                 characters, and avoid "&" and spaces in
                                 filenames
\-w, \-\-no\-overwrites              Do not overwrite files
\-c, \-\-continue                   Force resume of partially downloaded files.
                                 By default, youtube\-dl will resume
                                 downloads if possible.
\-\-no\-continue                    Do not resume partially downloaded files
                                 (restart from beginning)
\-\-no\-part                        Do not use .part files \- write directly
                                 into output file
\-\-no\-mtime                       Do not use the Last\-modified header to set
                                 the file modification time
\-\-write\-description              Write video description to a .description
                                 file
\-\-write\-info\-json                Write video metadata to a .info.json file
\-\-write\-annotations              Write video annotations to a
                                 .annotations.xml file
\-\-load\-info\-json FILE            JSON file containing the video information
                                 (created with the "\-\-write\-info\-json"
                                 option)
\-\-cookies FILE                   File to read cookies from and dump cookie
                                 jar in
\-\-cache\-dir DIR                  Location in the filesystem where youtube\-dl
                                 can store some downloaded information
                                 permanently. By default
                                 $XDG_CACHE_HOME/youtube\-dl or
                                 ~/.cache/youtube\-dl . At the moment, only
                                 YouTube player files (for videos with
                                 obfuscated signatures) are cached, but that
                                 may change.
\-\-no\-cache\-dir                   Disable filesystem caching
\-\-rm\-cache\-dir                   Delete all filesystem cache files
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Thumbnail images:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-write\-thumbnail                Write thumbnail image to disk
\-\-write\-all\-thumbnails           Write all thumbnail image formats to disk
\-\-list\-thumbnails                Simulate and list all available thumbnail
                                 formats
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Verbosity / Simulation Options:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-q, \-\-quiet                      Activate quiet mode
\-\-no\-warnings                    Ignore warnings
\-s, \-\-simulate                   Do not download the video and do not write
                                 anything to disk
\-\-skip\-download                  Do not download the video
\-g, \-\-get\-url                    Simulate, quiet but print URL
\-e, \-\-get\-title                  Simulate, quiet but print title
\-\-get\-id                         Simulate, quiet but print id
\-\-get\-thumbnail                  Simulate, quiet but print thumbnail URL
\-\-get\-description                Simulate, quiet but print video description
\-\-get\-duration                   Simulate, quiet but print video length
\-\-get\-filename                   Simulate, quiet but print output filename
\-\-get\-format                     Simulate, quiet but print output format
\-j, \-\-dump\-json                  Simulate, quiet but print JSON information.
                                 See the "OUTPUT TEMPLATE" for a description
                                 of available keys.
\-J, \-\-dump\-single\-json           Simulate, quiet but print JSON information
                                 for each command\-line argument. If the URL
                                 refers to a playlist, dump the whole
                                 playlist information in a single line.
\-\-print\-json                     Be quiet and print the video information as
                                 JSON (video is still being downloaded).
\-\-newline                        Output progress bar as new lines
\-\-no\-progress                    Do not print progress bar
\-\-console\-title                  Display progress in console titlebar
\-v, \-\-verbose                    Print various debugging information
\-\-dump\-pages                     Print downloaded pages encoded using base64
                                 to debug problems (very verbose)
\-\-write\-pages                    Write downloaded intermediary pages to
                                 files in the current directory to debug
                                 problems
\-\-print\-traffic                  Display sent and read HTTP traffic
\-C, \-\-call\-home                  Contact the youtube\-dl server for debugging
\-\-no\-call\-home                   Do NOT contact the youtube\-dl server for
                                 debugging
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Workarounds:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-encoding ENCODING              Force the specified encoding (experimental)
\-\-no\-check\-certificate           Suppress HTTPS certificate validation
\-\-prefer\-insecure                Use an unencrypted connection to retrieve
                                 information about the video. (Currently
                                 supported only for YouTube)
\-\-user\-agent UA                  Specify a custom user agent
\-\-referer URL                    Specify a custom referer, use if the video
                                 access is restricted to one domain
\-\-add\-header FIELD:VALUE         Specify a custom HTTP header and its value,
                                 separated by a colon \(aq:\(aq. You can use this
                                 option multiple times
\-\-bidi\-workaround                Work around terminals that lack
                                 bidirectional text support. Requires bidiv
                                 or fribidi executable in PATH
\-\-sleep\-interval SECONDS         Number of seconds to sleep before each
                                 download when used alone or a lower bound
                                 of a range for randomized sleep before each
                                 download (minimum possible number of
                                 seconds to sleep) when used along with
                                 \-\-max\-sleep\-interval.
\-\-max\-sleep\-interval SECONDS     Upper bound of a range for randomized sleep
                                 before each download (maximum possible
                                 number of seconds to sleep). Must only be
                                 used along with \-\-min\-sleep\-interval.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Video Format Options:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-f, \-\-format FORMAT              Video format code, see the "FORMAT
                                 SELECTION" for all the info
\-\-all\-formats                    Download all available video formats
\-\-prefer\-free\-formats            Prefer free video formats unless a specific
                                 one is requested
\-F, \-\-list\-formats               List all available formats of requested
                                 videos
\-\-youtube\-skip\-dash\-manifest     Do not download the DASH manifests and
                                 related data on YouTube videos
\-\-merge\-output\-format FORMAT     If a merge is required (e.g.
                                 bestvideo+bestaudio), output to given
                                 container format. One of mkv, mp4, ogg,
                                 webm, flv. Ignored if no merge is required
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Subtitle Options:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-write\-sub                      Write subtitle file
\-\-write\-auto\-sub                 Write automatically generated subtitle file
                                 (YouTube only)
\-\-all\-subs                       Download all the available subtitles of the
                                 video
\-\-list\-subs                      List all available subtitles for the video
\-\-sub\-format FORMAT              Subtitle format, accepts formats
                                 preference, for example: "srt" or
                                 "ass/srt/best"
\-\-sub\-lang LANGS                 Languages of the subtitles to download
                                 (optional) separated by commas, use \-\-list\-
                                 subs for available language tags
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Authentication Options:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-u, \-\-username USERNAME          Login with this account ID
\-p, \-\-password PASSWORD          Account password. If this option is left
                                 out, youtube\-dl will ask interactively.
\-2, \-\-twofactor TWOFACTOR        Two\-factor authentication code
\-n, \-\-netrc                      Use .netrc authentication data
\-\-video\-password PASSWORD        Video password (vimeo, smotri, youku)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Adobe Pass Options:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-ap\-mso MSO                     Adobe Pass multiple\-system operator (TV
                                 provider) identifier, use \-\-ap\-list\-mso for
                                 a list of available MSOs
\-\-ap\-username USERNAME           Multiple\-system operator account login
\-\-ap\-password PASSWORD           Multiple\-system operator account password.
                                 If this option is left out, youtube\-dl will
                                 ask interactively.
\-\-ap\-list\-mso                    List all supported multiple\-system
                                 operators
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Post\-processing Options:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-x, \-\-extract\-audio              Convert video files to audio\-only files
                                 (requires ffmpeg or avconv and ffprobe or
                                 avprobe)
\-\-audio\-format FORMAT            Specify audio format: "best", "aac",
                                 "flac", "mp3", "m4a", "opus", "vorbis", or
                                 "wav"; "best" by default; No effect without
                                 \-x
\-\-audio\-quality QUALITY          Specify ffmpeg/avconv audio quality, insert
                                 a value between 0 (better) and 9 (worse)
                                 for VBR or a specific bitrate like 128K
                                 (default 5)
\-\-recode\-video FORMAT            Encode the video to another format if
                                 necessary (currently supported:
                                 mp4|flv|ogg|webm|mkv|avi)
\-\-postprocessor\-args ARGS        Give these arguments to the postprocessor
\-k, \-\-keep\-video                 Keep the video file on disk after the post\-
                                 processing; the video is erased by default
\-\-no\-post\-overwrites             Do not overwrite post\-processed files; the
                                 post\-processed files are overwritten by
                                 default
\-\-embed\-subs                     Embed subtitles in the video (only for mp4,
                                 webm and mkv videos)
\-\-embed\-thumbnail                Embed thumbnail in the audio as cover art
\-\-add\-metadata                   Write metadata to the video file
\-\-metadata\-from\-title FORMAT     Parse additional metadata like song title /
                                 artist from the video title. The format
                                 syntax is the same as \-\-output. Regular
                                 expression with named capture groups may
                                 also be used. The parsed parameters replace
                                 existing values. Example: \-\-metadata\-from\-
                                 title "%(artist)s \- %(title)s" matches a
                                 title like "Coldplay \- Paradise". Example
                                 (regex): \-\-metadata\-from\-title
                                 "(?P<artist>.+?) \- (?P<title>.+)"
\-\-xattrs                         Write metadata to the video file\(aqs xattrs
                                 (using dublin core and xdg standards)
\-\-fixup POLICY                   Automatically correct known faults of the
                                 file. One of never (do nothing), warn (only
                                 emit a warning), detect_or_warn (the
                                 default; fix file if we can, warn
                                 otherwise)
\-\-prefer\-avconv                  Prefer avconv over ffmpeg for running the
                                 postprocessors
\-\-prefer\-ffmpeg                  Prefer ffmpeg over avconv for running the
                                 postprocessors (default)
\-\-ffmpeg\-location PATH           Location of the ffmpeg/avconv binary;
                                 either the path to the binary or its
                                 containing directory.
\-\-exec CMD                       Execute a command on the file after
                                 downloading and post\-processing, similar to
                                 find\(aqs \-exec syntax. Example: \-\-exec \(aqadb
                                 push {} /sdcard/Music/ && rm {}\(aq
\-\-convert\-subs FORMAT            Convert the subtitles to other format
                                 (currently supported: srt|ass|vtt|lrc)
.ft P
.fi
.UNINDENT
.UNINDENT
.SH CONFIGURATION
.sp
You can configure youtube\-dl by placing any supported command line option to a configuration file. On Linux and macOS, the system wide configuration file is located at \fB/etc/youtube\-dl.conf\fP and the user wide configuration file at \fB~/.config/youtube\-dl/config\fP\&. On Windows, the user wide configuration file locations are \fB%APPDATA%\eyoutube\-dl\econfig.txt\fP or \fBC:\eUsers\e<user name>\eyoutube\-dl.conf\fP\&. Note that by default configuration file may not exist so you may need to create it yourself.
.sp
For example, with the following configuration file youtube\-dl will always extract the audio, not copy the mtime, use a proxy and save all videos under \fBMovies\fP directory in your home directory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Lines starting with # are comments

# Always extract audio
\-x

# Do not copy the mtime
\-\-no\-mtime

# Use this proxy
\-\-proxy 127.0.0.1:3128

# Save all videos under Movies directory in your home directory
\-o ~/Movies/%(title)s.%(ext)s
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that options in configuration file are just the same options aka switches used in regular command line calls thus there \fBmust be no whitespace\fP after \fB\-\fP or \fB\-\-\fP, e.g. \fB\-o\fP or \fB\-\-proxy\fP but not \fB\- o\fP or \fB\-\- proxy\fP\&.
.sp
You can use \fB\-\-ignore\-config\fP if you want to disable the configuration file for a particular youtube\-dl run.
.sp
You can also use \fB\-\-config\-location\fP if you want to use custom configuration file for a particular youtube\-dl run.
.SS Authentication with \fB\&.netrc\fP file
.sp
You may also want to configure automatic credentials storage for extractors that support authentication (by providing login and password with \fB\-\-username\fP and \fB\-\-password\fP) in order not to pass credentials as command line arguments on every youtube\-dl execution and prevent tracking plain text passwords in the shell command history. You can achieve this using a \fI\%\&.netrc file\fP on a per extractor basis. For that you will need to create a \fB\&.netrc\fP file in your \fB$HOME\fP and restrict permissions to read/write by only you:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
touch $HOME/.netrc
chmod a\-rwx,u+rw $HOME/.netrc
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After that you can add credentials for an extractor in the following format, where \fIextractor\fP is the name of the extractor in lowercase:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
machine <extractor> login <login> password <password>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
machine youtube login myaccount@gmail.com password my_youtube_password
machine twitch login my_twitch_account_name password my_twitch_password
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To activate authentication with the \fB\&.netrc\fP file you should pass \fB\-\-netrc\fP to youtube\-dl or place it in the \fI\%configuration file\fP\&.
.sp
On Windows you may also need to setup the \fB%HOME%\fP environment variable manually. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set HOME=%USERPROFILE%
.ft P
.fi
.UNINDENT
.UNINDENT
.SH OUTPUT TEMPLATE
.sp
The \fB\-o\fP option allows users to indicate a template for the output file names.
.sp
\fBtl;dr:\fP \fI\%navigate me to examples\fP\&.
.sp
The basic usage is not to set any template arguments when downloading a single file, like in \fByoutube\-dl \-o funny_video.flv "https://some/video"\fP\&. However, it may contain special sequences that will be replaced when downloading each video. The special sequences may be formatted according to \fI\%python string formatting operations\fP\&. For example, \fB%(NAME)s\fP or \fB%(NAME)05d\fP\&. To clarify, that is a percent symbol followed by a name in parentheses, followed by formatting operations. Allowed names along with sequence type are:
.INDENT 0.0
.IP \(bu 2
\fBid\fP (string): Video identifier
.IP \(bu 2
\fBtitle\fP (string): Video title
.IP \(bu 2
\fBurl\fP (string): Video URL
.IP \(bu 2
\fBext\fP (string): Video filename extension
.IP \(bu 2
\fBalt_title\fP (string): A secondary title of the video
.IP \(bu 2
\fBdisplay_id\fP (string): An alternative identifier for the video
.IP \(bu 2
\fBuploader\fP (string): Full name of the video uploader
.IP \(bu 2
\fBlicense\fP (string): License name the video is licensed under
.IP \(bu 2
\fBcreator\fP (string): The creator of the video
.IP \(bu 2
\fBrelease_date\fP (string): The date (YYYYMMDD) when the video was released
.IP \(bu 2
\fBtimestamp\fP (numeric): UNIX timestamp of the moment the video became available
.IP \(bu 2
\fBupload_date\fP (string): Video upload date (YYYYMMDD)
.IP \(bu 2
\fBuploader_id\fP (string): Nickname or id of the video uploader
.IP \(bu 2
\fBchannel\fP (string): Full name of the channel the video is uploaded on
.IP \(bu 2
\fBchannel_id\fP (string): Id of the channel
.IP \(bu 2
\fBlocation\fP (string): Physical location where the video was filmed
.IP \(bu 2
\fBduration\fP (numeric): Length of the video in seconds
.IP \(bu 2
\fBview_count\fP (numeric): How many users have watched the video on the platform
.IP \(bu 2
\fBlike_count\fP (numeric): Number of positive ratings of the video
.IP \(bu 2
\fBdislike_count\fP (numeric): Number of negative ratings of the video
.IP \(bu 2
\fBrepost_count\fP (numeric): Number of reposts of the video
.IP \(bu 2
\fBaverage_rating\fP (numeric): Average rating give by users, the scale used depends on the webpage
.IP \(bu 2
\fBcomment_count\fP (numeric): Number of comments on the video
.IP \(bu 2
\fBage_limit\fP (numeric): Age restriction for the video (years)
.IP \(bu 2
\fBis_live\fP (boolean): Whether this video is a live stream or a fixed\-length video
.IP \(bu 2
\fBstart_time\fP (numeric): Time in seconds where the reproduction should start, as specified in the URL
.IP \(bu 2
\fBend_time\fP (numeric): Time in seconds where the reproduction should end, as specified in the URL
.IP \(bu 2
\fBformat\fP (string): A human\-readable description of the format
.IP \(bu 2
\fBformat_id\fP (string): Format code specified by \fB\-\-format\fP
.IP \(bu 2
\fBformat_note\fP (string): Additional info about the format
.IP \(bu 2
\fBwidth\fP (numeric): Width of the video
.IP \(bu 2
\fBheight\fP (numeric): Height of the video
.IP \(bu 2
\fBresolution\fP (string): Textual description of width and height
.IP \(bu 2
\fBtbr\fP (numeric): Average bitrate of audio and video in KBit/s
.IP \(bu 2
\fBabr\fP (numeric): Average audio bitrate in KBit/s
.IP \(bu 2
\fBacodec\fP (string): Name of the audio codec in use
.IP \(bu 2
\fBasr\fP (numeric): Audio sampling rate in Hertz
.IP \(bu 2
\fBvbr\fP (numeric): Average video bitrate in KBit/s
.IP \(bu 2
\fBfps\fP (numeric): Frame rate
.IP \(bu 2
\fBvcodec\fP (string): Name of the video codec in use
.IP \(bu 2
\fBcontainer\fP (string): Name of the container format
.IP \(bu 2
\fBfilesize\fP (numeric): The number of bytes, if known in advance
.IP \(bu 2
\fBfilesize_approx\fP (numeric): An estimate for the number of bytes
.IP \(bu 2
\fBprotocol\fP (string): The protocol that will be used for the actual download
.IP \(bu 2
\fBextractor\fP (string): Name of the extractor
.IP \(bu 2
\fBextractor_key\fP (string): Key name of the extractor
.IP \(bu 2
\fBepoch\fP (numeric): Unix epoch when creating the file
.IP \(bu 2
\fBautonumber\fP (numeric): Five\-digit number that will be increased with each download, starting at zero
.IP \(bu 2
\fBplaylist\fP (string): Name or id of the playlist that contains the video
.IP \(bu 2
\fBplaylist_index\fP (numeric): Index of the video in the playlist padded with leading zeros according to the total length of the playlist
.IP \(bu 2
\fBplaylist_id\fP (string): Playlist identifier
.IP \(bu 2
\fBplaylist_title\fP (string): Playlist title
.IP \(bu 2
\fBplaylist_uploader\fP (string): Full name of the playlist uploader
.IP \(bu 2
\fBplaylist_uploader_id\fP (string): Nickname or id of the playlist uploader
.UNINDENT
.sp
Available for the video that belongs to some logical chapter or section:
.INDENT 0.0
.IP \(bu 2
\fBchapter\fP (string): Name or title of the chapter the video belongs to
.IP \(bu 2
\fBchapter_number\fP (numeric): Number of the chapter the video belongs to
.IP \(bu 2
\fBchapter_id\fP (string): Id of the chapter the video belongs to
.UNINDENT
.sp
Available for the video that is an episode of some series or programme:
.INDENT 0.0
.IP \(bu 2
\fBseries\fP (string): Title of the series or programme the video episode belongs to
.IP \(bu 2
\fBseason\fP (string): Title of the season the video episode belongs to
.IP \(bu 2
\fBseason_number\fP (numeric): Number of the season the video episode belongs to
.IP \(bu 2
\fBseason_id\fP (string): Id of the season the video episode belongs to
.IP \(bu 2
\fBepisode\fP (string): Title of the video episode
.IP \(bu 2
\fBepisode_number\fP (numeric): Number of the video episode within a season
.IP \(bu 2
\fBepisode_id\fP (string): Id of the video episode
.UNINDENT
.sp
Available for the media that is a track or a part of a music album:
.INDENT 0.0
.IP \(bu 2
\fBtrack\fP (string): Title of the track
.IP \(bu 2
\fBtrack_number\fP (numeric): Number of the track within an album or a disc
.IP \(bu 2
\fBtrack_id\fP (string): Id of the track
.IP \(bu 2
\fBartist\fP (string): Artist(s) of the track
.IP \(bu 2
\fBgenre\fP (string): Genre(s) of the track
.IP \(bu 2
\fBalbum\fP (string): Title of the album the track belongs to
.IP \(bu 2
\fBalbum_type\fP (string): Type of the album
.IP \(bu 2
\fBalbum_artist\fP (string): List of all artists appeared on the album
.IP \(bu 2
\fBdisc_number\fP (numeric): Number of the disc or other physical medium the track belongs to
.IP \(bu 2
\fBrelease_year\fP (numeric): Year (YYYY) when the album was released
.UNINDENT
.sp
Each aforementioned sequence when referenced in an output template will be replaced by the actual value corresponding to the sequence name. Note that some of the sequences are not guaranteed to be present since they depend on the metadata obtained by a particular extractor. Such sequences will be replaced with \fBNA\fP\&.
.sp
For example for \fB\-o %(title)s\-%(id)s.%(ext)s\fP and an mp4 video with title \fByoutube\-dl test video\fP and id \fBBaW_jenozKcj\fP, this will result in a \fByoutube\-dl test video\-BaW_jenozKcj.mp4\fP file created in the current directory.
.sp
For numeric sequences you can use numeric related formatting, for example, \fB%(view_count)05d\fP will result in a string with view count padded with zeros up to 5 characters, like in \fB00042\fP\&.
.sp
Output templates can also contain arbitrary hierarchical path, e.g. \fB\-o \(aq%(playlist)s/%(playlist_index)s \- %(title)s.%(ext)s\(aq\fP which will result in downloading each video in a directory corresponding to this path template. Any missing directory will be automatically created for you.
.sp
To use percent literals in an output template use \fB%%\fP\&. To output to stdout use \fB\-o \-\fP\&.
.sp
The current default template is \fB%(title)s\-%(id)s.%(ext)s\fP\&.
.sp
In some cases, you don\(aqt want special characters such as 中, spaces, or &, such as when transferring the downloaded filename to a Windows system or the filename through an 8bit\-unsafe channel. In these cases, add the \fB\-\-restrict\-filenames\fP flag to get a shorter title:
.SS Output template and Windows batch files
.sp
If you are using an output template inside a Windows batch file then you must escape plain percent characters (\fB%\fP) by doubling, so that \fB\-o "%(title)s\-%(id)s.%(ext)s"\fP should become \fB\-o "%%(title)s\-%%(id)s.%%(ext)s"\fP\&. However you should not touch \fB%\fP\(aqs that are not plain characters, e.g. environment variables for expansion should stay intact: \fB\-o "C:\e%HOMEPATH%\eDesktop\e%%(title)s.%%(ext)s"\fP\&.
.SS Output template examples
.sp
Note that on Windows you may need to use double quotes instead of single.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ youtube\-dl \-\-get\-filename \-o \(aq%(title)s.%(ext)s\(aq BaW_jenozKc
youtube\-dl test video \(aq\(aq_ä↭𝕐.mp4    # All kinds of weird characters

$ youtube\-dl \-\-get\-filename \-o \(aq%(title)s.%(ext)s\(aq BaW_jenozKc \-\-restrict\-filenames
youtube\-dl_test_video_.mp4          # A simple file name

# Download YouTube playlist videos in separate directory indexed by video order in a playlist
$ youtube\-dl \-o \(aq%(playlist)s/%(playlist_index)s \- %(title)s.%(ext)s\(aq https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re

# Download all playlists of YouTube channel/user keeping each playlist in separate directory:
$ youtube\-dl \-o \(aq%(uploader)s/%(playlist)s/%(playlist_index)s \- %(title)s.%(ext)s\(aq https://www.youtube.com/user/TheLinuxFoundation/playlists

# Download Udemy course keeping each chapter in separate directory under MyVideos directory in your home
$ youtube\-dl \-u user \-p password \-o \(aq~/MyVideos/%(playlist)s/%(chapter_number)s \- %(chapter)s/%(title)s.%(ext)s\(aq https://www.udemy.com/java\-tutorial/

# Download entire series season keeping each series and each season in separate directory under C:/MyVideos
$ youtube\-dl \-o "C:/MyVideos/%(series)s/%(season_number)s \- %(season)s/%(episode_number)s \- %(episode)s.%(ext)s" https://videomore.ru/kino_v_detalayah/5_sezon/367617

# Stream the video being downloaded to stdout
$ youtube\-dl \-o \- BaW_jenozKc
.ft P
.fi
.UNINDENT
.UNINDENT
.SH FORMAT SELECTION
.sp
By default youtube\-dl tries to download the best available quality, i.e. if you want the best quality you \fBdon\(aqt need\fP to pass any special options, youtube\-dl will guess it for you by \fBdefault\fP\&.
.sp
But sometimes you may want to download in a different format, for example when you are on a slow or intermittent connection. The key mechanism for achieving this is so\-called \fIformat selection\fP based on which you can explicitly specify desired format, select formats based on some criterion or criteria, setup precedence and much more.
.sp
The general syntax for format selection is \fB\-\-format FORMAT\fP or shorter \fB\-f FORMAT\fP where \fBFORMAT\fP is a \fIselector expression\fP, i.e. an expression that describes format or formats you would like to download.
.sp
\fBtl;dr:\fP \fI\%navigate me to examples\fP\&.
.sp
The simplest case is requesting a specific format, for example with \fB\-f 22\fP you can download the format with format code equal to 22. You can get the list of available format codes for particular video using \fB\-\-list\-formats\fP or \fB\-F\fP\&. Note that these format codes are extractor specific.
.sp
You can also use a file extension (currently \fB3gp\fP, \fBaac\fP, \fBflv\fP, \fBm4a\fP, \fBmp3\fP, \fBmp4\fP, \fBogg\fP, \fBwav\fP, \fBwebm\fP are supported) to download the best quality format of a particular file extension served as a single file, e.g. \fB\-f webm\fP will download the best quality format with the \fBwebm\fP extension served as a single file.
.sp
You can also use special names to select particular edge case formats:
.INDENT 0.0
.IP \(bu 2
\fBbest\fP: Select the best quality format represented by a single file with video and audio.
.IP \(bu 2
\fBworst\fP: Select the worst quality format represented by a single file with video and audio.
.IP \(bu 2
\fBbestvideo\fP: Select the best quality video\-only format (e.g. DASH video). May not be available.
.IP \(bu 2
\fBworstvideo\fP: Select the worst quality video\-only format. May not be available.
.IP \(bu 2
\fBbestaudio\fP: Select the best quality audio only\-format. May not be available.
.IP \(bu 2
\fBworstaudio\fP: Select the worst quality audio only\-format. May not be available.
.UNINDENT
.sp
For example, to download the worst quality video\-only format you can use \fB\-f worstvideo\fP\&.
.sp
If you want to download multiple videos and they don\(aqt have the same formats available, you can specify the order of preference using slashes. Note that slash is left\-associative, i.e. formats on the left hand side are preferred, for example \fB\-f 22/17/18\fP will download format 22 if it\(aqs available, otherwise it will download format 17 if it\(aqs available, otherwise it will download format 18 if it\(aqs available, otherwise it will complain that no suitable formats are available for download.
.sp
If you want to download several formats of the same video use a comma as a separator, e.g. \fB\-f 22,17,18\fP will download all these three formats, of course if they are available. Or a more sophisticated example combined with the precedence feature: \fB\-f 136/137/mp4/bestvideo,140/m4a/bestaudio\fP\&.
.sp
You can also filter the video formats by putting a condition in brackets, as in \fB\-f "best[height=720]"\fP (or \fB\-f "[filesize>10M]"\fP).
.sp
The following numeric meta fields can be used with comparisons \fB<\fP, \fB<=\fP, \fB>\fP, \fB>=\fP, \fB=\fP (equals), \fB!=\fP (not equals):
.INDENT 0.0
.IP \(bu 2
\fBfilesize\fP: The number of bytes, if known in advance
.IP \(bu 2
\fBwidth\fP: Width of the video, if known
.IP \(bu 2
\fBheight\fP: Height of the video, if known
.IP \(bu 2
\fBtbr\fP: Average bitrate of audio and video in KBit/s
.IP \(bu 2
\fBabr\fP: Average audio bitrate in KBit/s
.IP \(bu 2
\fBvbr\fP: Average video bitrate in KBit/s
.IP \(bu 2
\fBasr\fP: Audio sampling rate in Hertz
.IP \(bu 2
\fBfps\fP: Frame rate
.UNINDENT
.sp
Also filtering work for comparisons \fB=\fP (equals), \fB^=\fP (starts with), \fB$=\fP (ends with), \fB*=\fP (contains) and following string meta fields:
.INDENT 0.0
.IP \(bu 2
\fBext\fP: File extension
.IP \(bu 2
\fBacodec\fP: Name of the audio codec in use
.IP \(bu 2
\fBvcodec\fP: Name of the video codec in use
.IP \(bu 2
\fBcontainer\fP: Name of the container format
.IP \(bu 2
\fBprotocol\fP: The protocol that will be used for the actual download, lower\-case (\fBhttp\fP, \fBhttps\fP, \fBrtsp\fP, \fBrtmp\fP, \fBrtmpe\fP, \fBmms\fP, \fBf4m\fP, \fBism\fP, \fBhttp_dash_segments\fP, \fBm3u8\fP, or \fBm3u8_native\fP)
.IP \(bu 2
\fBformat_id\fP: A short description of the format
.UNINDENT
.sp
Any string comparison may be prefixed with negation \fB!\fP in order to produce an opposite comparison, e.g. \fB!*=\fP (does not contain).
.sp
Note that none of the aforementioned meta fields are guaranteed to be present since this solely depends on the metadata obtained by particular extractor, i.e. the metadata offered by the video hoster.
.sp
Formats for which the value is not known are excluded unless you put a question mark (\fB?\fP) after the operator. You can combine format filters, so \fB\-f "[height <=? 720][tbr>500]"\fP selects up to 720p videos (or videos where the height is not known) with a bitrate of at least 500 KBit/s.
.sp
You can merge the video and audio of two formats into a single file using \fB\-f <video\-format>+<audio\-format>\fP (requires ffmpeg or avconv installed), for example \fB\-f bestvideo+bestaudio\fP will download the best video\-only format, the best audio\-only format and mux them together with ffmpeg/avconv.
.sp
Format selectors can also be grouped using parentheses, for example if you want to download the best mp4 and webm formats with a height lower than 480 you can use \fB\-f \(aq(mp4,webm)[height<480]\(aq\fP\&.
.sp
Since the end of April 2015 and version 2015.04.26, youtube\-dl uses \fB\-f bestvideo+bestaudio/best\fP as the default format selection (see \fI\%#5447\fP, \fI\%#5456\fP). If ffmpeg or avconv are installed this results in downloading \fBbestvideo\fP and \fBbestaudio\fP separately and muxing them together into a single file giving the best overall quality available. Otherwise it falls back to \fBbest\fP and results in downloading the best available quality served as a single file. \fBbest\fP is also needed for videos that don\(aqt come from YouTube because they don\(aqt provide the audio and video in two different files. If you want to only download some DASH formats (for example if you are not interested in getting videos with a resolution higher than 1080p), you can add \fB\-f bestvideo[height<=?1080]+bestaudio/best\fP to your configuration file. Note that if you use youtube\-dl to stream to \fBstdout\fP (and most likely to pipe it to your media player then), i.e. you explicitly specify output template as \fB\-o \-\fP, youtube\-dl still uses \fB\-f best\fP format selection in order to start content delivery immediately to your player and not to wait until \fBbestvideo\fP and \fBbestaudio\fP are downloaded and muxed.
.sp
If you want to preserve the old format selection behavior (prior to youtube\-dl 2015.04.26), i.e. you want to download the best available quality media served as a single file, you should explicitly specify your choice with \fB\-f best\fP\&. You may want to add it to the \fI\%configuration file\fP in order not to type it every time you run youtube\-dl.
.SS Format selection examples
.sp
Note that on Windows you may need to use double quotes instead of single.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Download best mp4 format available or any other best if no mp4 available
$ youtube\-dl \-f \(aqbestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best\(aq

# Download best format available but no better than 480p
$ youtube\-dl \-f \(aqbestvideo[height<=480]+bestaudio/best[height<=480]\(aq

# Download best video only format but no bigger than 50 MB
$ youtube\-dl \-f \(aqbest[filesize<50M]\(aq

# Download best format available via direct link over HTTP/HTTPS protocol
$ youtube\-dl \-f \(aq(bestvideo+bestaudio/best)[protocol^=http]\(aq

# Download the best video format and the best audio format without merging them
$ youtube\-dl \-f \(aqbestvideo,bestaudio\(aq \-o \(aq%(title)s.f%(format_id)s.%(ext)s\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that in the last example, an output template is recommended as bestvideo and bestaudio may have the same file name.
.SH VIDEO SELECTION
.sp
Videos can be filtered by their upload date using the options \fB\-\-date\fP, \fB\-\-datebefore\fP or \fB\-\-dateafter\fP\&. They accept dates in two formats:
.INDENT 0.0
.IP \(bu 2
Absolute dates: Dates in the format \fBYYYYMMDD\fP\&.
.IP \(bu 2
Relative dates: Dates in the format \fB(now|today)[+\-][0\-9](day|week|month|year)(s)?\fP
.UNINDENT
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Download only the videos uploaded in the last 6 months
$ youtube\-dl \-\-dateafter now\-6months

# Download only the videos uploaded on January 1, 1970
$ youtube\-dl \-\-date 19700101

$ # Download only the videos uploaded in the 200x decade
$ youtube\-dl \-\-dateafter 20000101 \-\-datebefore 20091231
.ft P
.fi
.UNINDENT
.UNINDENT
.SH FAQ
.SS How do I update youtube\-dl?
.sp
If you\(aqve followed \fI\%our manual installation instructions\fP, you can simply run \fByoutube\-dl \-U\fP (or, on Linux, \fBsudo youtube\-dl \-U\fP).
.sp
If you have used pip, a simple \fBsudo pip install \-U youtube\-dl\fP is sufficient to update.
.sp
If you have installed youtube\-dl using a package manager like \fIapt\-get\fP or \fIyum\fP, use the standard system update mechanism to update. Note that distribution packages are often outdated. As a rule of thumb, youtube\-dl releases at least once a month, and often weekly or even daily. Simply go to https://yt\-dl.org to find out the current version. Unfortunately, there is nothing we youtube\-dl developers can do if your distribution serves a really outdated version. You can (and should) complain to your distribution in their bugtracker or support forum.
.sp
As a last resort, you can also uninstall the version installed by your package manager and follow our manual installation instructions. For that, remove the distribution\(aqs package, with a line like
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo apt\-get remove \-y youtube\-dl
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Afterwards, simply follow \fI\%our manual installation instructions\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo wget https://yt\-dl.org/downloads/latest/youtube\-dl \-O /usr/local/bin/youtube\-dl
sudo chmod a+rx /usr/local/bin/youtube\-dl
hash \-r
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Again, from then on you\(aqll be able to update with \fBsudo youtube\-dl \-U\fP\&.
.SS youtube\-dl is extremely slow to start on Windows
.sp
Add a file exclusion for \fByoutube\-dl.exe\fP in Windows Defender settings.
.SS I\(aqm getting an error \fBUnable to extract OpenGraph title\fP on YouTube playlists
.sp
YouTube changed their playlist format in March 2014 and later on, so you\(aqll need at least youtube\-dl 2014.07.25 to download all YouTube videos.
.sp
If you have installed youtube\-dl with a package manager, pip, setup.py or a tarball, please use that to update. Note that Ubuntu packages do not seem to get updated anymore. Since we are not affiliated with Ubuntu, there is little we can do. Feel free to \fI\%report bugs\fP to the \fI\%Ubuntu packaging people\fP \- all they have to do is update the package to a somewhat recent version. See above for a way to update.
.SS I\(aqm getting an error when trying to use output template: \fBerror: using output template conflicts with using title, video ID or auto number\fP
.sp
Make sure you are not using \fB\-o\fP with any of these options \fB\-t\fP, \fB\-\-title\fP, \fB\-\-id\fP, \fB\-A\fP or \fB\-\-auto\-number\fP set in command line or in a configuration file. Remove the latter if any.
.SS Do I always have to pass \fB\-citw\fP?
.sp
By default, youtube\-dl intends to have the best options (incidentally, if you have a convincing case that these should be different, \fI\%please file an issue where you explain that\fP). Therefore, it is unnecessary and sometimes harmful to copy long option strings from webpages. In particular, the only option out of \fB\-citw\fP that is regularly useful is \fB\-i\fP\&.
.SS Can you please put the \fB\-b\fP option back?
.sp
Most people asking this question are not aware that youtube\-dl now defaults to downloading the highest available quality as reported by YouTube, which will be 1080p or 720p in some cases, so you no longer need the \fB\-b\fP option. For some specific videos, maybe YouTube does not report them to be available in a specific high quality format you\(aqre interested in. In that case, simply request it with the \fB\-f\fP option and youtube\-dl will try to download it.
.SS I get HTTP error 402 when trying to download a video. What\(aqs this?
.sp
Apparently YouTube requires you to pass a CAPTCHA test if you download too much. We\(aqre \fI\%considering to provide a way to let you solve the CAPTCHA\fP, but at the moment, your best course of action is pointing a web browser to the youtube URL, solving the CAPTCHA, and restart youtube\-dl.
.SS Do I need any other programs?
.sp
youtube\-dl works fine on its own on most sites. However, if you want to convert video/audio, you\(aqll need \fI\%avconv\fP or \fI\%ffmpeg\fP\&. On some sites \- most notably YouTube \- videos can be retrieved in a higher quality format without sound. youtube\-dl will detect whether avconv/ffmpeg is present and automatically pick the best option.
.sp
Videos or video formats streamed via RTMP protocol can only be downloaded when \fI\%rtmpdump\fP is installed. Downloading MMS and RTSP videos requires either \fI\%mplayer\fP or \fI\%mpv\fP to be installed.
.SS I have downloaded a video but how can I play it?
.sp
Once the video is fully downloaded, use any video player, such as \fI\%mpv\fP, \fI\%vlc\fP or \fI\%mplayer\fP\&.
.SS I extracted a video URL with \fB\-g\fP, but it does not play on another machine / in my web browser.
.sp
It depends a lot on the service. In many cases, requests for the video (to download/play it) must come from the same IP address and with the same cookies and/or HTTP headers. Use the \fB\-\-cookies\fP option to write the required cookies into a file, and advise your downloader to read cookies from that file. Some sites also require a common user agent to be used, use \fB\-\-dump\-user\-agent\fP to see the one in use by youtube\-dl. You can also get necessary cookies and HTTP headers from JSON output obtained with \fB\-\-dump\-json\fP\&.
.sp
It may be beneficial to use IPv6; in some cases, the restrictions are only applied to IPv4. Some services (sometimes only for a subset of videos) do not restrict the video URL by IP address, cookie, or user\-agent, but these are the exception rather than the rule.
.sp
Please bear in mind that some URL protocols are \fBnot\fP supported by browsers out of the box, including RTMP. If you are using \fB\-g\fP, your own downloader must support these as well.
.sp
If you want to play the video on a machine that is not running youtube\-dl, you can relay the video content from the machine that runs youtube\-dl. You can use \fB\-o \-\fP to let youtube\-dl stream a video to stdout, or simply allow the player to download the files written by youtube\-dl in turn.
.SS ERROR: no fmt_url_map or conn information found in video info
.sp
YouTube has switched to a new video info format in July 2011 which is not supported by old versions of youtube\-dl. See \fI\%above\fP for how to update youtube\-dl.
.SS ERROR: unable to download video
.sp
YouTube requires an additional signature since September 2012 which is not supported by old versions of youtube\-dl. See \fI\%above\fP for how to update youtube\-dl.
.SS Video URL contains an ampersand and I\(aqm getting some strange output \fB[1] 2839\fP or \fB\(aqv\(aq is not recognized as an internal or external command\fP
.sp
That\(aqs actually the output from your shell. Since ampersand is one of the special shell characters it\(aqs interpreted by the shell preventing you from passing the whole URL to youtube\-dl. To disable your shell from interpreting the ampersands (or any other special characters) you have to either put the whole URL in quotes or escape them with a backslash (which approach will work depends on your shell).
.sp
For example if your URL is https://www.youtube.com/watch?t=4&v=BaW_jenozKc you should end up with following command:
.sp
\fByoutube\-dl \(aqhttps://www.youtube.com/watch?t=4&v=BaW_jenozKc\(aq\fP
.sp
or
.sp
\fByoutube\-dl https://www.youtube.com/watch?t=4\e&v=BaW_jenozKc\fP
.sp
For Windows you have to use the double quotes:
.sp
\fByoutube\-dl "https://www.youtube.com/watch?t=4&v=BaW_jenozKc"\fP
.SS ExtractorError: Could not find JS function u\(aqOF\(aq
.sp
In February 2015, the new YouTube player contained a character sequence in a string that was misinterpreted by old versions of youtube\-dl. See \fI\%above\fP for how to update youtube\-dl.
.SS HTTP Error 429: Too Many Requests or 402: Payment Required
.sp
These two error codes indicate that the service is blocking your IP address because of overuse. Usually this is a soft block meaning that you can gain access again after solving CAPTCHA. Just open a browser and solve a CAPTCHA the service suggests you and after that \fI\%pass cookies\fP to youtube\-dl. Note that if your machine has multiple external IPs then you should also pass exactly the same IP you\(aqve used for solving CAPTCHA with \fI\%\-\-source\-address\fP\&. Also you may need to pass a \fBUser\-Agent\fP HTTP header of your browser with \fI\%\-\-user\-agent\fP\&.
.sp
If this is not the case (no CAPTCHA suggested to solve by the service) then you can contact the service and ask them to unblock your IP address, or \- if you have acquired a whitelisted IP address already \- use the \fI\%\-\-proxy or \-\-source\-address options\fP to select another IP address.
.SS SyntaxError: Non\-ASCII character
.sp
The error
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
File "youtube\-dl", line 2
SyntaxError: Non\-ASCII character \(aq\ex93\(aq ...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
means you\(aqre using an outdated version of Python. Please update to Python 2.6 or 2.7.
.SS What is this binary file? Where has the code gone?
.sp
Since June 2012 (\fI\%#342\fP) youtube\-dl is packed as an executable zipfile, simply unzip it (might need renaming to \fByoutube\-dl.zip\fP first on some systems) or clone the git repository, as laid out above. If you modify the code, you can run it by executing the \fB__main__.py\fP file. To recompile the executable, run \fBmake youtube\-dl\fP\&.
.SS The exe throws an error due to missing \fBMSVCR100.dll\fP
.sp
To run the exe you need to install first the \fI\%Microsoft Visual C++ 2010 Redistributable Package (x86)\fP\&.
.SS On Windows, how should I set up ffmpeg and youtube\-dl? Where should I put the exe files?
.sp
If you put youtube\-dl and ffmpeg in the same directory that you\(aqre running the command from, it will work, but that\(aqs rather cumbersome.
.sp
To make a different directory work \- either for ffmpeg, or for youtube\-dl, or for both \- simply create the directory (say, \fBC:\ebin\fP, or \fBC:\eUsers\e<User name>\ebin\fP), put all the executables directly in there, and then \fI\%set your PATH environment variable\fP to include that directory.
.sp
From then on, after restarting your shell, you will be able to access both youtube\-dl and ffmpeg (and youtube\-dl will be able to find ffmpeg) by simply typing \fByoutube\-dl\fP or \fBffmpeg\fP, no matter what directory you\(aqre in.
.SS How do I put downloads into a specific folder?
.sp
Use the \fB\-o\fP to specify an \fI\%output template\fP, for example \fB\-o "/home/user/videos/%(title)s\-%(id)s.%(ext)s"\fP\&. If you want this for all of your downloads, put the option into your \fI\%configuration file\fP\&.
.SS How do I download a video starting with a \fB\-\fP?
.sp
Either prepend \fBhttps://www.youtube.com/watch?v=\fP or separate the ID from the options with \fB\-\-\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
youtube\-dl \-\- \-wNyEUrxzFU
youtube\-dl "https://www.youtube.com/watch?v=\-wNyEUrxzFU"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS How do I pass cookies to youtube\-dl?
.sp
Use the \fB\-\-cookies\fP option, for example \fB\-\-cookies /path/to/cookies/file.txt\fP\&.
.sp
In order to extract cookies from browser use any conforming browser extension for exporting cookies. For example, \fI\%cookies.txt\fP (for Chrome) or \fI\%cookies.txt\fP (for Firefox).
.sp
Note that the cookies file must be in Mozilla/Netscape format and the first line of the cookies file must be either \fB# HTTP Cookie File\fP or \fB# Netscape HTTP Cookie File\fP\&. Make sure you have correct \fI\%newline format\fP in the cookies file and convert newlines if necessary to correspond with your OS, namely \fBCRLF\fP (\fB\er\en\fP) for Windows and \fBLF\fP (\fB\en\fP) for Unix and Unix\-like systems (Linux, macOS, etc.). \fBHTTP Error 400: Bad Request\fP when using \fB\-\-cookies\fP is a good sign of invalid newline format.
.sp
Passing cookies to youtube\-dl is a good way to workaround login when a particular extractor does not implement it explicitly. Another use case is working around \fI\%CAPTCHA\fP some websites require you to solve in particular cases in order to get access (e.g. YouTube, CloudFlare).
.SS How do I stream directly to media player?
.sp
You will first need to tell youtube\-dl to stream media to stdout with \fB\-o \-\fP, and also tell your media player to read from stdin (it must be capable of this for streaming) and then pipe former to latter. For example, streaming to \fI\%vlc\fP can be achieved with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
youtube\-dl \-o \- "https://www.youtube.com/watch?v=BaW_jenozKcj" | vlc \-
.ft P
.fi
.UNINDENT
.UNINDENT
.SS How do I download only new videos from a playlist?
.sp
Use download\-archive feature. With this feature you should initially download the complete playlist with \fB\-\-download\-archive /path/to/download/archive/file.txt\fP that will record identifiers of all the videos in a special file. Each subsequent run with the same \fB\-\-download\-archive\fP will download only new videos and skip all videos that have been downloaded before. Note that only successful downloads are recorded in the file.
.sp
For example, at first,
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
youtube\-dl \-\-download\-archive archive.txt "https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will download the complete \fBPLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re\fP playlist and create a file \fBarchive.txt\fP\&. Each subsequent run will only download new videos if any:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
youtube\-dl \-\-download\-archive archive.txt "https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Should I add \fB\-\-hls\-prefer\-native\fP into my config?
.sp
When youtube\-dl detects an HLS video, it can download it either with the built\-in downloader or ffmpeg. Since many HLS streams are slightly invalid and ffmpeg/youtube\-dl each handle some invalid cases better than the other, there is an option to switch the downloader if needed.
.sp
When youtube\-dl knows that one particular downloader works better for a given website, that downloader will be picked. Otherwise, youtube\-dl will pick the best downloader for general compatibility, which at the moment happens to be ffmpeg. This choice may change in future versions of youtube\-dl, with improvements of the built\-in downloader and/or ffmpeg.
.sp
In particular, the generic extractor (used when your website is not in the \fI\%list of supported sites by youtube\-dl\fP cannot mandate one specific downloader.
.sp
If you put either \fB\-\-hls\-prefer\-native\fP or \fB\-\-hls\-prefer\-ffmpeg\fP into your configuration, a different subset of videos will fail to download correctly. Instead, it is much better to \fI\%file an issue\fP or a pull request which details why the native or the ffmpeg HLS downloader is a better choice for your use case.
.SS Can you add support for this anime video site, or site which shows current movies for free?
.sp
As a matter of policy (as well as legality), youtube\-dl does not include support for services that specialize in infringing copyright. As a rule of thumb, if you cannot easily find a video that the service is quite obviously allowed to distribute (i.e. that has been uploaded by the creator, the creator\(aqs distributor, or is published under a free license), the service is probably unfit for inclusion to youtube\-dl.
.sp
A note on the service that they don\(aqt host the infringing content, but just link to those who do, is evidence that the service should \fBnot\fP be included into youtube\-dl. The same goes for any DMCA note when the whole front page of the service is filled with videos they are not allowed to distribute. A "fair use" note is equally unconvincing if the service shows copyright\-protected videos in full without authorization.
.sp
Support requests for services that \fBdo\fP purchase the rights to distribute their content are perfectly fine though. If in doubt, you can simply include a source that mentions the legitimate purchase of content.
.SS How can I speed up work on my issue?
.sp
(Also known as: Help, my important issue not being solved!) The youtube\-dl core developer team is quite small. While we do our best to solve as many issues as possible, sometimes that can take quite a while. To speed up your issue, here\(aqs what you can do:
.sp
First of all, please do report the issue \fI\%at our issue tracker\fP\&. That allows us to coordinate all efforts by users and developers, and serves as a unified point. Unfortunately, the youtube\-dl project has grown too large to use personal email as an effective communication channel.
.sp
Please read the \fI\%bug reporting instructions\fP below. A lot of bugs lack all the necessary information. If you can, offer proxy, VPN, or shell access to the youtube\-dl developers. If you are able to, test the issue from multiple computers in multiple countries to exclude local censorship or misconfiguration issues.
.sp
If nobody is interested in solving your issue, you are welcome to take matters into your own hands and submit a pull request (or coerce/pay somebody else to do so).
.sp
Feel free to bump the issue from time to time by writing a small comment ("Issue is still present in youtube\-dl version ...from France, but fixed from Belgium"), but please not more than once a month. Please do not declare your issue as \fBimportant\fP or \fBurgent\fP\&.
.SS How can I detect whether a given URL is supported by youtube\-dl?
.sp
For one, have a look at the \fI\%list of supported sites\fP\&. Note that it can sometimes happen that the site changes its URL scheme (say, from https://example.com/video/1234567 to https://example.com/v/1234567 ) and youtube\-dl reports an URL of a service in that list as unsupported. In that case, simply report a bug.
.sp
It is \fInot\fP possible to detect whether a URL is supported or not. That\(aqs because youtube\-dl contains a generic extractor which matches \fBall\fP URLs. You may be tempted to disable, exclude, or remove the generic extractor, but the generic extractor not only allows users to extract videos from lots of websites that embed a video from another service, but may also be used to extract video from a service that it\(aqs hosting itself. Therefore, we neither recommend nor support disabling, excluding, or removing the generic extractor.
.sp
If you want to find out whether a given URL is supported, simply call youtube\-dl with it. If you get no videos back, chances are the URL is either not referring to a video or unsupported. You can find out which by examining the output (if you run youtube\-dl on the console) or catching an \fBUnsupportedError\fP exception if you run it from a Python program.
.SH WHY DO I NEED TO GO THROUGH THAT MUCH RED TAPE WHEN FILING BUGS?
.sp
Before we had the issue template, despite our extensive \fI\%bug reporting instructions\fP, about 80% of the issue reports we got were useless, for instance because people used ancient versions hundreds of releases old, because of simple syntactic errors (not in youtube\-dl but in general shell usage), because the problem was already reported multiple times before, because people did not actually read an error message, even if it said "please install ffmpeg", because people did not mention the URL they were trying to download and many more simple, easy\-to\-avoid problems, many of whom were totally unrelated to youtube\-dl.
.sp
youtube\-dl is an open\-source project manned by too few volunteers, so we\(aqd rather spend time fixing bugs where we are certain none of those simple problems apply, and where we can be reasonably confident to be able to reproduce the issue without asking the reporter repeatedly. As such, the output of \fByoutube\-dl \-v YOUR_URL_HERE\fP is really all that\(aqs required to file an issue. The issue template also guides you through some basic steps you can do, such as checking that your version of youtube\-dl is current.
.SH DEVELOPER INSTRUCTIONS
.sp
Most users do not need to build youtube\-dl and can \fI\%download the builds\fP or get them from their distribution.
.sp
To run youtube\-dl as a developer, you don\(aqt need to build anything either. Simply execute
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
python \-m youtube_dl
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To run the test, simply invoke your favorite test runner, or execute a test file directly; any of the following work:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
python \-m unittest discover
python test/test_download.py
nosetests
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
See item 6 of \fI\%new extractor tutorial\fP for how to run extractor specific test cases.
.sp
If you want to create a build of youtube\-dl yourself, you\(aqll need
.INDENT 0.0
.IP \(bu 2
python
.IP \(bu 2
make (only GNU make is supported)
.IP \(bu 2
pandoc
.IP \(bu 2
zip
.IP \(bu 2
nosetests
.UNINDENT
.SS Adding support for a new site
.sp
If you want to add support for a new site, first of all \fBmake sure\fP this site is \fBnot dedicated to \fI\%copyright infringement\fP\fP\&. youtube\-dl does \fBnot support\fP such sites thus pull requests adding support for them \fBwill be rejected\fP\&.
.sp
After you have ensured this site is distributing its content legally, you can follow this quick list (assuming your service is called \fByourextractor\fP):
.INDENT 0.0
.IP \(bu 2
\fI\%Fork this repository\fP
.IP \(bu 2
Check out the source code with:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
 git clone git@github.com:YOUR_GITHUB_USERNAME/youtube\-dl.git
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Start a new git branch with
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
 cd youtube\-dl
 git checkout \-b yourextractor
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Start with this simple template and save it to \fByoutube_dl/extractor/yourextractor.py\fP:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
# coding: utf\-8
from __future__ import unicode_literals

from .common import InfoExtractor


class YourExtractorIE(InfoExtractor):
    _VALID_URL = r\(aqhttps?://(?:www\e.)?yourextractor\e.com/watch/(?P<id>[0\-9]+)\(aq
    _TEST = {
        \(aqurl\(aq: \(aqhttps://yourextractor.com/watch/42\(aq,
        \(aqmd5\(aq: \(aqTODO: md5 sum of the first 10241 bytes of the video file (use \-\-test)\(aq,
        \(aqinfo_dict\(aq: {
            \(aqid\(aq: \(aq42\(aq,
            \(aqext\(aq: \(aqmp4\(aq,
            \(aqtitle\(aq: \(aqVideo title goes here\(aq,
            \(aqthumbnail\(aq: r\(aqre:^https?://.*\e.jpg$\(aq,
            # TODO more properties, either as:
            # * A value
            # * MD5 checksum; start the string with md5:
            # * A regular expression; start the string with re:
            # * Any Python type (for example int or float)
        }
    }

    def _real_extract(self, url):
        video_id = self._match_id(url)
        webpage = self._download_webpage(url, video_id)

        # TODO more code goes here, for example ...
        title = self._html_search_regex(r\(aq<h1>(.+?)</h1>\(aq, webpage, \(aqtitle\(aq)

        return {
            \(aqid\(aq: video_id,
            \(aqtitle\(aq: title,
            \(aqdescription\(aq: self._og_search_description(webpage),
            \(aquploader\(aq: self._search_regex(r\(aq<div[^>]+id="uploader"[^>]*>([^<]+)<\(aq, webpage, \(aquploader\(aq, fatal=False),
            # TODO more properties (see youtube_dl/extractor/common.py)
        }
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Add an import in \fI\%youtube_dl/extractor/extractors.py\fP\&.
.IP \(bu 2
Run \fBpython test/test_download.py TestDownload.test_YourExtractor\fP\&. This \fIshould fail\fP at first, but you can continually re\-run it until you\(aqre done. If you decide to add more than one test, then rename \fB_TEST\fP to \fB_TESTS\fP and make it into a list of dictionaries. The tests will then be named \fBTestDownload.test_YourExtractor\fP, \fBTestDownload.test_YourExtractor_1\fP, \fBTestDownload.test_YourExtractor_2\fP, etc. Note that tests with \fBonly_matching\fP key in test\(aqs dict are not counted in.
.IP \(bu 2
Have a look at \fI\%youtube_dl/extractor/common.py\fP for possible helper methods and a \fI\%detailed description of what your extractor should and may return\fP\&. Add tests and code for as many as you want.
.IP \(bu 2
Make sure your code follows \fI\%youtube\-dl coding conventions\fP and check the code with \fI\%flake8\fP:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
 $ flake8 youtube_dl/extractor/yourextractor.py
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Make sure your code works under all \fI\%Python\fP versions claimed supported by youtube\-dl, namely 2.6, 2.7, and 3.2+.
.IP \(bu 2
When the tests pass, \fI\%add\fP the new files and \fI\%commit\fP them and \fI\%push\fP the result, like this:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
$ git add youtube_dl/extractor/extractors.py
$ git add youtube_dl/extractor/yourextractor.py
$ git commit \-m \(aq[yourextractor] Add new extractor\(aq
$ git push origin yourextractor
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Finally, \fI\%create a pull request\fP\&. We\(aqll then review and merge it.
.UNINDENT
.sp
In any case, thank you very much for your contributions!
.SS youtube\-dl coding conventions
.sp
This section introduces a guide lines for writing idiomatic, robust and future\-proof extractor code.
.sp
Extractors are very fragile by nature since they depend on the layout of the source data provided by 3rd party media hosters out of your control and this layout tends to change. As an extractor implementer your task is not only to write code that will extract media links and metadata correctly but also to minimize dependency on the source\(aqs layout and even to make the code foresee potential future changes and be ready for that. This is important because it will allow the extractor not to break on minor layout changes thus keeping old youtube\-dl versions working. Even though this breakage issue is easily fixed by emitting a new version of youtube\-dl with a fix incorporated, all the previous versions become broken in all repositories and distros\(aq packages that may not be so prompt in fetching the update from us. Needless to say, some non rolling release distros may never receive an update at all.
.SS Mandatory and optional metafields
.sp
For extraction to work youtube\-dl relies on metadata your extractor extracts and provides to youtube\-dl expressed by an \fI\%information dictionary\fP or simply \fIinfo dict\fP\&. Only the following meta fields in the \fIinfo dict\fP are considered mandatory for a successful extraction process by youtube\-dl:
.INDENT 0.0
.IP \(bu 2
\fBid\fP (media identifier)
.IP \(bu 2
\fBtitle\fP (media title)
.IP \(bu 2
\fBurl\fP (media download URL) or \fBformats\fP
.UNINDENT
.sp
In fact only the last option is technically mandatory (i.e. if you can\(aqt figure out the download location of the media the extraction does not make any sense). But by convention youtube\-dl also treats \fBid\fP and \fBtitle\fP as mandatory. Thus the aforementioned metafields are the critical data that the extraction does not make any sense without and if any of them fail to be extracted then the extractor is considered completely broken.
.sp
\fI\%Any field\fP apart from the aforementioned ones are considered \fBoptional\fP\&. That means that extraction should be \fBtolerant\fP to situations when sources for these fields can potentially be unavailable (even if they are always available at the moment) and \fBfuture\-proof\fP in order not to break the extraction of general purpose mandatory fields.
.SS Example
.sp
Say you have some source dictionary \fBmeta\fP that you\(aqve fetched as JSON with HTTP request and it has a key \fBsummary\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
meta = self._download_json(url, video_id)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Assume at this point \fBmeta\fP\(aqs layout is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    ...
    "summary": "some fancy summary text",
    ...
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Assume you want to extract \fBsummary\fP and put it into the resulting info dict as \fBdescription\fP\&. Since \fBdescription\fP is an optional meta field you should be ready that this key may be missing from the \fBmeta\fP dict, so that you should extract it like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
description = meta.get(\(aqsummary\(aq)  # correct
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and not like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
description = meta[\(aqsummary\(aq]  # incorrect
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The latter will break extraction process with \fBKeyError\fP if \fBsummary\fP disappears from \fBmeta\fP at some later time but with the former approach extraction will just go ahead with \fBdescription\fP set to \fBNone\fP which is perfectly fine (remember \fBNone\fP is equivalent to the absence of data).
.sp
Similarly, you should pass \fBfatal=False\fP when extracting optional data from a webpage with \fB_search_regex\fP, \fB_html_search_regex\fP or similar methods, for instance:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
description = self._search_regex(
    r\(aq<span[^>]+id="title"[^>]*>([^<]+)<\(aq,
    webpage, \(aqdescription\(aq, fatal=False)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
With \fBfatal\fP set to \fBFalse\fP if \fB_search_regex\fP fails to extract \fBdescription\fP it will emit a warning and continue extraction.
.sp
You can also pass \fBdefault=<some fallback value>\fP, for example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
description = self._search_regex(
    r\(aq<span[^>]+id="title"[^>]*>([^<]+)<\(aq,
    webpage, \(aqdescription\(aq, default=None)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
On failure this code will silently continue the extraction with \fBdescription\fP set to \fBNone\fP\&. That is useful for metafields that may or may not be present.
.SS Provide fallbacks
.sp
When extracting metadata try to do so from multiple sources. For example if \fBtitle\fP is present in several places, try extracting from at least some of them. This makes it more future\-proof in case some of the sources become unavailable.
.SS Example
.sp
Say \fBmeta\fP from the previous example has a \fBtitle\fP and you are about to extract it. Since \fBtitle\fP is a mandatory meta field you should end up with something like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
title = meta[\(aqtitle\(aq]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If \fBtitle\fP disappears from \fBmeta\fP in future due to some changes on the hoster\(aqs side the extraction would fail since \fBtitle\fP is mandatory. That\(aqs expected.
.sp
Assume that you have some another source you can extract \fBtitle\fP from, for example \fBog:title\fP HTML meta of a \fBwebpage\fP\&. In this case you can provide a fallback scenario:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
title = meta.get(\(aqtitle\(aq) or self._og_search_title(webpage)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This code will try to extract from \fBmeta\fP first and if it fails it will try extracting \fBog:title\fP from a \fBwebpage\fP\&.
.SS Regular expressions
.SS Don\(aqt capture groups you don\(aqt use
.sp
Capturing group must be an indication that it\(aqs used somewhere in the code. Any group that is not used must be non capturing.
.SS Example
.sp
Don\(aqt capture id attribute name here since you can\(aqt use it for anything anyway.
.sp
Correct:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
r\(aq(?:id|ID)=(?P<id>\ed+)\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Incorrect:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
r\(aq(id|ID)=(?P<id>\ed+)\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Make regular expressions relaxed and flexible
.sp
When using regular expressions try to write them fuzzy, relaxed and flexible, skipping insignificant parts that are more likely to change, allowing both single and double quotes for quoted values and so on.
.SS Example
.sp
Say you need to extract \fBtitle\fP from the following HTML code:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<span style="position: absolute; left: 910px; width: 90px; float: right; z\-index: 9999;" class="title">some fancy title</span>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The code for that task should look similar to:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
title = self._search_regex(
    r\(aq<span[^>]+class="title"[^>]*>([^<]+)\(aq, webpage, \(aqtitle\(aq)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Or even better:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
title = self._search_regex(
    r\(aq<span[^>]+class=(["\e\(aq])title\e1[^>]*>(?P<title>[^<]+)\(aq,
    webpage, \(aqtitle\(aq, group=\(aqtitle\(aq)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note how you tolerate potential changes in the \fBstyle\fP attribute\(aqs value or switch from using double quotes to single for \fBclass\fP attribute:
.sp
The code definitely should not look like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
title = self._search_regex(
    r\(aq<span style="position: absolute; left: 910px; width: 90px; float: right; z\-index: 9999;" class="title">(.*?)</span>\(aq,
    webpage, \(aqtitle\(aq, group=\(aqtitle\(aq)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Long lines policy
.sp
There is a soft limit to keep lines of code under 80 characters long. This means it should be respected if possible and if it does not make readability and code maintenance worse.
.sp
For example, you should \fBnever\fP split long string literals like URLs or some other often copied entities over multiple lines to fit this limit:
.sp
Correct:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\(aqhttps://www.youtube.com/watch?v=FqZTN594JQw&list=PLMYEtVRpaqY00V9W81Cwmzp6N6vZqfUKD4\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Incorrect:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\(aqhttps://www.youtube.com/watch?v=FqZTN594JQw&list=\(aq
\(aqPLMYEtVRpaqY00V9W81Cwmzp6N6vZqfUKD4\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Inline values
.sp
Extracting variables is acceptable for reducing code duplication and improving readability of complex expressions. However, you should avoid extracting variables used only once and moving them to opposite parts of the extractor file, which makes reading the linear flow difficult.
.SS Example
.sp
Correct:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
title = self._html_search_regex(r\(aq<title>([^<]+)</title>\(aq, webpage, \(aqtitle\(aq)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Incorrect:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
TITLE_RE = r\(aq<title>([^<]+)</title>\(aq
# ...some lines of code...
title = self._html_search_regex(TITLE_RE, webpage, \(aqtitle\(aq)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Collapse fallbacks
.sp
Multiple fallback values can quickly become unwieldy. Collapse multiple fallback values into a single expression via a list of patterns.
.SS Example
.sp
Good:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
description = self._html_search_meta(
    [\(aqog:description\(aq, \(aqdescription\(aq, \(aqtwitter:description\(aq],
    webpage, \(aqdescription\(aq, default=None)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Unwieldy:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
description = (
    self._og_search_description(webpage, default=None)
    or self._html_search_meta(\(aqdescription\(aq, webpage, default=None)
    or self._html_search_meta(\(aqtwitter:description\(aq, webpage, default=None))
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Methods supporting list of patterns are: \fB_search_regex\fP, \fB_html_search_regex\fP, \fB_og_search_property\fP, \fB_html_search_meta\fP\&.
.SS Trailing parentheses
.sp
Always move trailing parentheses after the last argument.
.SS Example
.sp
Correct:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    lambda x: x[\(aqResultSet\(aq][\(aqResult\(aq][0][\(aqVideoUrlSet\(aq][\(aqVideoUrl\(aq],
    list)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Incorrect:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    lambda x: x[\(aqResultSet\(aq][\(aqResult\(aq][0][\(aqVideoUrlSet\(aq][\(aqVideoUrl\(aq],
    list,
)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Use convenience conversion and parsing functions
.sp
Wrap all extracted numeric data into safe functions from \fI\%youtube_dl/utils.py\fP: \fBint_or_none\fP, \fBfloat_or_none\fP\&. Use them for string to number conversions as well.
.sp
Use \fBurl_or_none\fP for safe URL processing.
.sp
Use \fBtry_get\fP for safe metadata extraction from parsed JSON.
.sp
Use \fBunified_strdate\fP for uniform \fBupload_date\fP or any \fBYYYYMMDD\fP meta field extraction, \fBunified_timestamp\fP for uniform \fBtimestamp\fP extraction, \fBparse_filesize\fP for \fBfilesize\fP extraction, \fBparse_count\fP for count meta fields extraction, \fBparse_resolution\fP, \fBparse_duration\fP for \fBduration\fP extraction, \fBparse_age_limit\fP for \fBage_limit\fP extraction.
.sp
Explore \fI\%youtube_dl/utils.py\fP for more useful convenience functions.
.SS More examples
.SS Safely extract optional description from parsed JSON
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
description = try_get(response, lambda x: x[\(aqresult\(aq][\(aqvideo\(aq][0][\(aqsummary\(aq], compat_str)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Safely extract more optional metadata
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
video = try_get(response, lambda x: x[\(aqresult\(aq][\(aqvideo\(aq][0], dict) or {}
description = video.get(\(aqsummary\(aq)
duration = float_or_none(video.get(\(aqdurationMs\(aq), scale=1000)
view_count = int_or_none(video.get(\(aqviews\(aq))
.ft P
.fi
.UNINDENT
.UNINDENT
.SH EMBEDDING YOUTUBE-DL
.sp
youtube\-dl makes the best effort to be a good command\-line program, and thus should be callable from any programming language. If you encounter any problems parsing its output, feel free to \fI\%create a report\fP\&.
.sp
From a Python program, you can embed youtube\-dl in a more powerful fashion, like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from __future__ import unicode_literals
import youtube_dl

ydl_opts = {}
with youtube_dl.YoutubeDL(ydl_opts) as ydl:
    ydl.download([\(aqhttps://www.youtube.com/watch?v=BaW_jenozKc\(aq])
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Most likely, you\(aqll want to use various options. For a list of options available, have a look at \fI\%youtube_dl/YoutubeDL.py\fP\&. For a start, if you want to intercept youtube\-dl\(aqs output, set a \fBlogger\fP object.
.sp
Here\(aqs a more complete example of a program that outputs only errors (and a short message after the download is finished), and downloads/converts the video to an mp3 file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from __future__ import unicode_literals
import youtube_dl


class MyLogger(object):
    def debug(self, msg):
        pass

    def warning(self, msg):
        pass

    def error(self, msg):
        print(msg)


def my_hook(d):
    if d[\(aqstatus\(aq] == \(aqfinished\(aq:
        print(\(aqDone downloading, now converting ...\(aq)


ydl_opts = {
    \(aqformat\(aq: \(aqbestaudio/best\(aq,
    \(aqpostprocessors\(aq: [{
        \(aqkey\(aq: \(aqFFmpegExtractAudio\(aq,
        \(aqpreferredcodec\(aq: \(aqmp3\(aq,
        \(aqpreferredquality\(aq: \(aq192\(aq,
    }],
    \(aqlogger\(aq: MyLogger(),
    \(aqprogress_hooks\(aq: [my_hook],
}
with youtube_dl.YoutubeDL(ydl_opts) as ydl:
    ydl.download([\(aqhttps://www.youtube.com/watch?v=BaW_jenozKc\(aq])
.ft P
.fi
.UNINDENT
.UNINDENT
.SH BUGS
.sp
Bugs and suggestions should be reported at: \fI\%https://github.com/ytdl\-org/youtube\-dl/issues\fP\&. Unless you were prompted to or there is another pertinent reason (e.g. GitHub fails to accept the bug report), please do not send bug reports via personal email. For discussions, join us in the IRC channel \fI\%#youtube\-dl\fP on freenode (\fI\%webchat\fP).
.sp
\fBPlease include the full output of youtube\-dl when run with \fP\fB\-v\fP, i.e. \fBadd\fP \fB\-v\fP flag to \fByour command line\fP, copy the \fBwhole\fP output and post it in the issue body wrapped in \(ga\(ga\(ga for better formatting. It should look similar to this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ youtube\-dl \-v <your command line>
[debug] System config: []
[debug] User config: []
[debug] Command\-line args: [u\(aq\-v\(aq, u\(aqhttps://www.youtube.com/watch?v=BaW_jenozKcj\(aq]
[debug] Encodings: locale cp1251, fs mbcs, out cp866, pref cp1251
[debug] youtube\-dl version 2015.12.06
[debug] Git HEAD: 135392e
[debug] Python version 2.6.6 \- Windows\-2003Server\-5.2.3790\-SP2
[debug] exe versions: ffmpeg N\-75573\-g1d0487f, ffprobe N\-75573\-g1d0487f, rtmpdump 2.4
[debug] Proxy map: {}
\&...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBDo not post screenshots of verbose logs; only plain text is acceptable.\fP
.sp
The output (including the first lines) contains important debugging information. Issues without the full output are often not reproducible and therefore do not get solved in short order, if ever.
.sp
Please re\-read your issue once again to avoid a couple of common mistakes (you can and should use this as a checklist):
.SS Is the description of the issue itself sufficient?
.sp
We often get issue reports that we cannot really decipher. While in most cases we eventually get the required information after asking back multiple times, this poses an unnecessary drain on our resources. Many contributors, including myself, are also not native speakers, so we may misread some parts.
.sp
So please elaborate on what feature you are requesting, or what bug you want to be fixed. Make sure that it\(aqs obvious
.INDENT 0.0
.IP \(bu 2
What the problem is
.IP \(bu 2
How it could be fixed
.IP \(bu 2
How your proposed solution would look like
.UNINDENT
.sp
If your report is shorter than two lines, it is almost certainly missing some of these, which makes it hard for us to respond to it. We\(aqre often too polite to close the issue outright, but the missing info makes misinterpretation likely. As a committer myself, I often get frustrated by these issues, since the only possible way for me to move forward on them is to ask for clarification over and over.
.sp
For bug reports, this means that your report should contain the \fIcomplete\fP output of youtube\-dl when called with the \fB\-v\fP flag. The error message you get for (most) bugs even says so, but you would not believe how many of our bug reports do not contain this information.
.sp
If your server has multiple IPs or you suspect censorship, adding \fB\-\-call\-home\fP may be a good idea to get more diagnostics. If the error is \fBERROR: Unable to extract ...\fP and you cannot reproduce it from multiple countries, add \fB\-\-dump\-pages\fP (warning: this will yield a rather large output, redirect it to the file \fBlog.txt\fP by adding \fB>log.txt 2>&1\fP to your command\-line) or upload the \fB\&.dump\fP files you get when you add \fB\-\-write\-pages\fP \fI\%somewhere\fP\&.
.sp
\fBSite support requests must contain an example URL\fP\&. An example URL is a URL you might want to download, like \fBhttps://www.youtube.com/watch?v=BaW_jenozKc\fP\&. There should be an obvious video present. Except under very special circumstances, the main page of a video service (e.g. \fBhttps://www.youtube.com/\fP) is \fInot\fP an example URL.
.SS Are you using the latest version?
.sp
Before reporting any issue, type \fByoutube\-dl \-U\fP\&. This should report that you\(aqre up\-to\-date. About 20% of the reports we receive are already fixed, but people are using outdated versions. This goes for feature requests as well.
.SS Is the issue already documented?
.sp
Make sure that someone has not already opened the issue you\(aqre trying to open. Search at the top of the window or browse the \fI\%GitHub Issues\fP of this repository. If there is an issue, feel free to write something along the lines of "This affects me as well, with version 2015.01.01. Here is some more information on the issue: ..."\&. While some issues may be old, a new post into them often spurs rapid activity.
.SS Why are existing options not enough?
.sp
Before requesting a new feature, please have a quick peek at \fI\%the list of supported options\fP\&. Many feature requests are for features that actually exist already! Please, absolutely do show off your work in the issue report and detail how the existing similar options do \fInot\fP solve your problem.
.SS Is there enough context in your bug report?
.sp
People want to solve problems, and often think they do us a favor by breaking down their larger problems (e.g. wanting to skip already downloaded files) to a specific request (e.g. requesting us to look whether the file exists before downloading the info page). However, what often happens is that they break down the problem into two steps: One simple, and one impossible (or extremely complicated one).
.sp
We are then presented with a very complicated request when the original problem could be solved far easier, e.g. by recording the downloaded video IDs in a separate file. To avoid this, you must include the greater context where it is non\-obvious. In particular, every feature request that does not consist of adding support for a new site should contain a use case scenario that explains in what situation the missing feature would be useful.
.SS Does the issue involve one problem, and one problem only?
.sp
Some of our users seem to think there is a limit of issues they can or should open. There is no limit of issues they can or should open. While it may seem appealing to be able to dump all your issues into one ticket, that means that someone who solves one of your issues cannot mark the issue as closed. Typically, reporting a bunch of issues leads to the ticket lingering since nobody wants to attack that behemoth, until someone mercifully splits the issue into multiple ones.
.sp
In particular, every site support request issue should only pertain to services at one site (generally under a common domain, but always using the same backend technology). Do not request support for vimeo user videos, White house podcasts, and Google Plus pages in the same issue. Also, make sure that you don\(aqt post bug reports alongside feature requests. As a rule of thumb, a feature request does not include outputs of youtube\-dl that are not immediately related to the feature at hand. Do not post reports of a network error alongside the request for a new video service.
.SS Is anyone going to need the feature?
.sp
Only post features that you (or an incapacitated friend you can personally talk to) require. Do not post features because they seem like a good idea. If they are really useful, they will be requested by someone who requires them.
.SS Is your question about youtube\-dl?
.sp
It may sound strange, but some bug reports we receive are completely unrelated to youtube\-dl and relate to a different, or even the reporter\(aqs own, application. Please make sure that you are actually using youtube\-dl. If you are using a UI for youtube\-dl, report the bug to the maintainer of the actual application providing the UI. On the other hand, if your UI for youtube\-dl fails in some way you believe is related to youtube\-dl, by all means, go ahead and report the bug.
.SH COPYRIGHT
.sp
youtube\-dl is released into the public domain by the copyright holders.
.sp
This README file was originally written by \fI\%Daniel Bolton\fP and is likewise released into the public domain.
.SH AUTHOR
Stefano Dottore
.SH COPYRIGHT
2020, Stefano Dottore
.\" Generated by docutils manpage writer.
.
